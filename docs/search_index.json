[["index.html", "", " Microscopic Traffic Simulation Program User Guide Dr. Scott S. Washburn "],["preface.html", "Preface Document Organization About the Developer", " Preface Document Organization This user guide is organized in four parts: Getting Started Creating a Simulation Project Running a Simulation Project Simulation Logic and Vehicle Movement Models About the Developer Dr. Washburn specializes in the application and development of microscopic traffic simulation tools. His experience in this area dates back to the early 1990’s, starting with modifying the source code for INTRAS (INtegrated TRAffic Simulation) to test alternate freeway on-ramp metering timing strategies. In 2000, the Federal Highway Administration (FHWA) transferred the rights of CORSIM (CORridor SIMulation), a successor package to INTRAS, to the McTrans Center at the University of Florida. Over approximately the following 10 years, Dr. Washburn worked with McTrans on several projects to enhance the capabilities of CORSIM, including the implementation of two-lane highway modeling, toll plaza modeling, High-Occupancy Toll (HOT) lane modeling, and the calculation of additional performance measures (percent-time-spent-following, follower density, and acceleration variance). Over approximately the last 12 years, Dr. Washburn has led the development of SwashSim, a microscopic traffic simulation tool. SwashSim employs many of the same vehicle movement models as used in CORSIM, but with numerous refinements and enhancements. Unlike CORSIM, SwashSim is built on a modern software architecture (object-oriented, C#/.NET). This modern software architecture for SwashSim provides the ability to easily expand and enhance the tool to accommodate recent and future focus areas in transportation modeling, such as autonomous and connected vehicles, artificial intelligence, and digital twins. "],["ChapterIntro.html", "1 Introduction 1.1 SwashSim Overview 1.2 Supporting Resources and Tools 1.3 Program Installation", " 1 Introduction 1.1 SwashSim Overview SwashSim is a traffic micro-simulation tool that can be used to model traffic on a variety of roadway facilities–signalized arterials, freeways, multilane highways, and two-lane highways. SwashSim employs a modern software architecture, one that is object-oriented and built on the C#/.NET programming model, which allows for a high level of extensibility and modularity. This architecture also supports a high level of fidelity with respect to temporal and spatial modeling resolution. The key modeling features of SwashSim include the following: Time resolution: uses a 0.1-second simulation time step, Car-following model: Modified Pitt (an extension of the Pitt model used in CORSIM). Details on these models can be found at Car Following, Lane-changing model (mandatory, discretionary): largely based on CORSIM models. Details on these models can be found at Lane Changing, Gap acceptance model: based on the models used in CORSIM but correlated to driver type. Details on these models can be found at Gap Acceptance, Two-lane highway passing behavior: based on the models implemented in CORSIM. Details on these models can be found at Two-Lane Highway Modeling, Detailed vehicle acceleration modeling: utilizes powertrain characteristics of vehicles (engine, transmission) and resistance forces (aerodynamic, rolling, grade) to determine maximum acceleration capability. Details on these models can be found at Maximum Acceleration, Vehicle characteristics: includes numerous vehicle models by default (such as a low-performance Honda Accord, a higher-performance Dodge Challenger, a Ford 150 pickup truck, a Chevy Blazer SUV, and a tractor+semi-trailer combination), with the ability to include more. The full list of included vehicles can be found at Vehicles, Driver characteristics: contains 10 driver types by default (type 1-the most conservative driver, type 10-the most aggressive driver); treating drivers as distinct objects (i.e., driver characteristics are not embedded with vehicle characteristics), consequently enabling the user to separately customize vehicle and driver characteristics. Driver details can be found at Drivers, Signal control modes: pretimed and actuated signal control. The signal controller architecture replicates the standard NEMA ring and barrier architecture, Ramp metering: able to run three traffic-responsive ramp-metering algorithms: ALINEA, Fuzzy logic, and demand/capacity, in addition to pretimed control. Details on these algorithms can be found at Ramp Metering, and Route assignment method: randomly assigning a turning movement for the next link based on user-specified turning percentages for the link or using an origin-destination (O-D) demand matrix with user equilibrium traffic assignment. Details on these models can be found at Route Assignment. 1.2 Supporting Resources and Tools 1.2.1 Example Projects A number of example projects are available on GitHub: https://github.com/swash17/SwashSim/tree/master/Projects 1.2.2 Tutorial Videos A number of tutorial videos are available at https://www.youtube.com/@washburninnovativesoftware6302/videos 1.3 Program Installation Place the two installation files (‘setup.exe’ and ‘SwashSim.msi’) in any folder of your choice and then run the ‘setup.exe’ program. If the installation program does not start after launching ‘setup.exe’, check your settings for Windows Defender SmartScreen (https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-smartscreen/microsoft-defender-smartscreen-overview). The main program file is named SwashSim.exe, but there should also be a desktop icon and start menu item for it after installation. One thing to be careful of–you may be able to install the program to the default installation folder (‘C:\\Program Files\\SwashWare\\SwashSim’), but have a login security restriction that prevents the program from writing files to this folder. In that case, you will not be able to view results after running the simulation, unless you change your output data folder (under Settings -&gt; Project Properties) to a folder for which your login account has access permission. 1.3.1 System Requirements The minimum computer system requirements to run SwashSim are as follows: Software Operating Systems Supported: Microsoft Windows, versions 11, 10, 8 and 7. Microsoft .NET 7.0, or higher, installed on your computer. The installation process should give you a warning if you do not have the required version of the .NET Desktop Runtime. But if you have any problem starting the program after installation, this should be the first thing to check. You can check which version of the .NET Desktop Runtime you have installed in your Programs and Features section of the Control Panel. If needed, you can download the latest version, for free, from https://dotnet.microsoft.com/en-us/download/dotnet/7.0. Choose x64 (for a 64-bit computer). Minimum Hardware Configuration At least 1 GHz x64 (i.e., 64-bit) compatible CPU At least 4 GB RAM 1200 x 768 high color (16 bit) display At least 100 MB free disk space. Recommended Hardware Configuration At least 1.5 GHz x64 compatible CPU At least 16 GB RAM 1920 x 1080 high color (16 bit) display "],["ChapterUIoverview.html", "2 User Interface Overview 2.1 Starting the Program 2.2 Starting a New Project 2.3 Opening a Project 2.4 Saving a Project 2.5 Screens/Modules 2.6 Network File Treeview", " 2 User Interface Overview This chapter provides an overview of the main user interface components of the program. Additional details about some of the components are contained in other chapters, but are also linked from this chapter. 2.1 Starting the Program After you have installed the program, double-click on the SwashSim icon on your desktop or within the ‘Start’ menu. Alternatively, you can navigate to the program installation folder and double-click on ‘SwashSim.exe’ to start the program. This will load the main program window, referred to as the Main Screen hereafter. The Main Screen will initially show the start up panel. This start up panel includes the program version number and options to start a new project or open an existing project. Figure 2.1: Main Screen with Start Up Panel 2.2 Starting a New Project To start a new project, select ‘New Project’. This can be done from the start up panel or the toolbar or the ‘File’ menu (see screenshots below). Figure 2.2: New Project Icon on the Main Screen Toolbar Figure 2.3: New Project Icon in the File Menu After selecting the New Project option, a dialog with three options is presented: Custom Freeway Quick Editor Two-Lane Highway Quick Editor The quick editor input screens use a table style for data entry. These input screens are suitable for a simple, linear facility, such as a single freeway or two-lane highway facility. The Custom option allows any type of roadway network to be created. This option must be used for an arterial because intersections along the route consist of intersecting roadways. Facilities created with a quick editor can be converted to a custom type (discussed in the [Settings] section). This will allow the original network to be expanded and/or additional input parameters to be modified that are not available in the quick editor screens. Select the desired project type, and then click the ‘OK’ button (see screenshot below). Alternatively, you can double-click on a facility type with the left mouse button and the corresponding input screen will be loaded into the Main Screen. Figure 2.4: New Project Options 2.3 Opening a Project To open a saved project, select ‘Open Project’. This can be done from the toolbar or the ‘File’ menu (see screenshots below). Figure 2.5: Open Project Icon on the Main Screen Toolbar Figure 2.6: Open Project Icon in the File Menu After selecting ‘Open Project’, you will be presented with a dialog for selecting a project file (*.ssim). Recently used files will be listed in the ‘Select Existing File’ panel and can be opened by just selecting the desired file and then pressing the ‘OK’ button. If the desired file is not shown, press the ‘Browse For File…’ button. Figure 2.7: Open Project–Recently Used Files Listing 2.4 Saving a Project To save your project data to a file, select ‘Save’ or ‘Save As’. This can be done from the toolbar or the ‘File’ menu (see screenshots below). The ‘Save As’ option is only available from the ‘File’ menu. If the project has not previously been saved, the ‘Save’ option functions the same as the ‘Save As’ option. Selecting ‘Save’ for a previous saved project will update the currently saved files. If you want to change the name of the project, use the ‘Save As’ option. Figure 2.8: Save Project Icon on the Main Screen Toolbar Figure 2.9: Save Project Icon in the File Menu Every SwashSim project requires the following two files: A project data file: This file will have an extension of “ssim” (for SwashSim). It contains all the information from the Settings screen. It also contains the settings from the Simulation Control Panel. A network data file: This file will have an extension of “nwf” (for NetworkFile). This file contains the information pertaining to the physical definition of the network (links, nodes, etc.) and traffic data.This file is saved automatically with the latest network settings when the project file is saved. A SwashSim project may also include the following files: A signal data file: This file will have an extension of “xml”. If your project includes one or more signalized intersections, the signal control data for those intersections are specified in the Traffic Control module and are saved in this file. A multi-scenario run data file: This file will have an extension of “xml”. You can set up a project to run multiple sets of traffic data inputs for the same roadway network. These data are specified in the Simulation Control Panel and are saved in this file. All of these files are in an XML format1 (Courage, Washburn, and Kim 2002), regardless of the filename extension. XML files can be viewed and directly modified in a text editing program. Unless you are very experienced user of the SwashSim program, it is strongly discouraged to modify the contents of these files outside of the SwashSim program. The computer folder location of all project supporting files are stored within the project data file (*.ssim) The name of the saved project file will be displayed in the upper-right corner of the Main Screen (see screenshot below). If the full filename is not visible in the textbox, you can click in this box with your mouse and navigate to the right with the keyboard ‘right arrow’ key or ‘End’ key. The default file extension is “.ssim”. Figure 2.10: Filename Location for Saved Project Information about setting or changing the folder location of these files is in the Settings -&gt; Project Properties section. Note that every time you save your project, a backup copy of the *.nwf file will be saved (same filename but with ’_Copy#’ appended to the end. ‘#’ will be the copy number, with higher numbers being a more recent copy). If something should happen to go wrong with one of your project saves and your NWF file gets corrupted, you can use your most recent backup copy to avoid starting from scratch–just remove ’_Copy#’ from the filename. 2.5 Screens/Modules Once a new project has been started, or an existing one opened, you will generally work with the following screens/modules: Settings Table View Freeway (Quick Editor only) Two-Lane Highway (Quick Editor only) Custom [Traffic Control] Network File Treeview Simulation Control Panel These modules are accessed with the buttons on the Main Screen toolbar. Figure 2.11: Toolbar Settings Button Each of these modules is detailed in later chapters of the User Guide, but are also linked from the list above. 2.6 Network File Treeview The Network File Treeview screen is used to view the underlying XML (eXtensible Markup Language) structure of the saved network data. This screen is provided only for information purposes–values cannot be edited in this view. Figure 2.12: Network File Treeview https://www.w3schools.com/XML/xml_whatis.asp, https://en.wikipedia.org/wiki/XML↩︎ "],["overview.html", "3 Overview 3.1 Settings 3.2 Project Properties", " 3 Overview A traffic simulation involves the interaction of vehicles and traffic control devices within a roadway network. Thus, these objects must be fully defined before a simulation can be run. This part of the user guide describes the data and objects that must be specified to develop a simulation project. Those objects consist of the following: Driver population Vehicle fleet Roadway network Traffic control devices The driver population characteristics are specified within the Settings screen and are described here. The vehicle fleet characteristics are also specified within the Settings screen and are described here. The network structure employed in SwashSim is described here. As previously mentioned, there are two different methods to define a network–Quick Editor and Custom. Those network creation methods are described in separate chapters: Freeway Quick Editor, Freeway Quick Editor, and Custom. Network development/editing with the Quick Editor is done through a tabular-style interface. As such, it is only appropriate for linear networks; i.e., a single roadway. Any network configuration can be developed with the Custom editor. Freeway facility or two-lane highway facility projects converted from HCM-CALC (http://swashware.com/HCMCalc/) are initially in the Quick Editor format. However, any networks developed through the Quick Editor can be converted to Custom mode at any time. This is done through the Settings -&gt; Project Properties option under the File menu. 3.1 Settings If you want to change any of the default simulation settings as discussed in the previous section, they are accessed by selecting ‘Settings’ on the toolbar (See figure below). Figure 3.1: Toolbar Settings Button Under settings, the parameters for the various models/algorithms and data items can be revised. These items are discussed in their respective sections of the documentation, as follows: Project Properties Drivers Vehicles General Vehicle Movement Car Following Lane Changing Two-Lane Highway Passing Emissions (Vehicle Specific Power) 3.2 Project Properties Figure 3.2: Project Properties Screen If the project type is currently set to ‘Freeway Quick Editor’ or ‘Two-Lane Highway Quick Editor’, the ‘Change Project Type to Custom’ will be enabled. If you press this button, the project will be converted to the ‘Custom’ format, and subsequently all network editing will be confined to the Map View (i.e., the Table View will no longer be accessible). The other fields in the ‘Facility Information’ section and all the fields in the ‘File Information’ section are optional. None of this information affects the simulation process. The relevant folder or file names are displayed in the yellow text boxes on each respective setting screen. Use the ‘Change…’ button to the right of the folder/file name to select a different folder or file. "],["ChapterDrivers.html", "4 Drivers", " 4 Drivers For each vehicle generated into the network, a driver type is randomly assigned. By default, 10 driver types are included. Driver type ‘1’ corresponds to the most conservative type of driver and driver type ‘10’ corresponds to the most aggressive type of driver. The default settings are stored in the ‘DriverParms.xml’ file, which is in the ‘DataFiles_ModelParms’ folder under the program installation folder. Values specified for each driver type include: Driver ID Desired headway multiplier Desired speed multiplier: multiplied by the link free-flow speed. Desired acceleration multiplier: multiplied by the base desired acceleration value. Desired deceleration multiplier: multiplied by the base desired deceleration value. Desired maximum speed Desired speed deviation. This is the ± range that the vehicle’s speed must be within, of the desired speed, when the vehicle is able to travel at its desired speed. The percentage of each driver type in the traffic stream, which must total to 100%. The default values can be changed in the Settings, under the Drivers section, as shown below. Figure 4.1: Driver Settings "],["ChapterVehicles.html", "5 Vehicles 5.1 Vehicle Fleet Types 5.2 Vehicle Models", " 5 Vehicles Vehicle fleet types and models included in the simulation are specified in the ‘Vehicles’ section of the Settings. Figure 5.1: Vehicles Settings Screen 5.1 Vehicle Fleet Types By default, there are four vehicle fleet types in SwashSim, as follows. Small Auto Large Auto Small Truck Large Truck Figure 5.2: Vehicle Fleet Types Additional fleet types can be added (press the ‘+ Add New Fleet’ button). Existing fleet types can be edited–press the ‘Select’ button under the ‘Edit’ column in the table. The properties for a new fleet type or editing an existing one are set through the following dialog. Figure 5.3: Vehicle Fleet Types The following properties for a fleet type can be specified: Fleet Label: It is suggested to use a short, but descriptive, string for this property. Description (optional): Additional information about the fleet type can be included here. It is only for information purposes and not used within the simulation. Minimum/Maximum Driver Type: The range for these values are based on the number of driver types defined in the Drivers screen. For some fleet types, it may be appropriate to use a narrower range of driver types than the full range available. By default, SwashSim uses a driver type range of 3-8 for the Small Truck and Large Truck fleet types. Maximum Deceleration: The default value is -19.0 ft/s/s. This value is typically attainable by all vehicle models and generally corresponds to deceleration rates observed under panic braking situations. Desired speed proportion. This value is an additional multiplier for a vehicle’s desired speed. By default, SwashSim uses values less than 1.0 for the Small Truck and Large Truck fleet types. To delete a fleet type, press the ‘Delete’ button on the right side of the fleet type entry in the table. 5.2 Vehicle Models Any number of different vehicle models can be included in the simulation. By default, the following vehicles are included, along with their default fleet type assignment. Fleet Type Vehicle Model Small Auto Buick Century 1998 Chevrolet Impala LS 2008 Dodge Challenger SXT 2017 Ford Mustang 1998 Honda Civic 2009 Honda Civic Si 2009 Jeep Patriot 2012 Mazda 3 Sedan 2019 Mazda 6 2005 Mini Cooper 3 2021 Nissan Versa Hatch 2010 Pontiac Grand Am GT 2004 Porsche 911 Speedster 2019 Large Auto Chevrolet S10 1998 Chevrolet Silverado 2002 Chevrolet Tahoe 2004 Ford F150 2011 Small Truck Single-unit truck Large Truck Intermediate tractor + semi-trailer Interstate tractor + semi-trailer Tractor + double trailer When selecting a fleet type in the top table, the vehicle models belonging to that fleet type are shown in the table in the lower right part of the screen. For example, in Figure @(fig:FleetTypes), the ‘SmallAuto’ fleet type is selected, and the 13 vehicle models belonging to this fleet type are shown in the lower table. Additional vehicle models can be added (press the ‘+ Create New Vehicle’ button). Existing vehicle models can be edited–press the ‘Select’ button under the ‘Edit’ column in the lower table. The properties for a new vehicle model or editing an existing one are set through the following dialog. These properties are discussed further in the remaining sections of this chapter. Figure 5.4: Vehicle Fleet Types To delete a vehicle model, press the ‘Delete’ button on the right side of its entry in the table. The fleet types shown in the upper table and vehicle models included within each fleet type (as shown in the lower-right table) are what will be included in the active simulation session. When the project is saved, these fleet types and vehicle models will be saved to the project file. The panel on the lower left part of the screen lists all the vehicle model definitions that are saved in files in the specified ‘Vehicles Data Folder’ setting of the Settings -&gt; Project Properties screen. The default folder location is within the program installation folder. Figure @(fig:VehicleSelection) shows the vehicle model selections included with SwashSim by default. Figure 5.5: Vehicle Fleet Types All vehicle model definitions used in a simulation must be contained within the same folder. Any number of vehicle definitions can be created and saved to file. Only those vehicle models listed in the lower-right table (per fleet type) will be included in the simulation. To add a vehicle definition saved in the specified ‘Vehicle Data Folder’, select the vehicle from the list in the lower-left panel and press the ‘Add Vehicle -&gt;’ button. If vehicle model composition in the traffic stream varies from one simulation project to another, it may be helpful to organize the vehicle model definition files into project-specific folders. 5.2.1 Vehicle Model Definitions SwashSim uses a comprehensive set of calculations to determine vehicle acceleration capability (discussed here) and fuel consumption/emissions modeling (discussed here). Because of this, numerous vehicle characteristics must be specified for each vehicle included in the simulation. An overview of these inputs follows. On the main ‘Vehicle Definition Data’ dialog, the following properties are specified: Vehicle Label: This label is also used for the filename if the vehicle model definition is saved to file. The program will check for the presence of invalid filename characters and provide a warning if it finds any. Notes (optional) Length Width Height Weight Drag coefficient Drive Wheel radius Each vehicle needs to have engine characteristics specified for it. To specify the vehicle’s engine information, press the ‘Edit Engine Data’ button. This will load the following dialog. Figure 5.6: Vehicle Engine Torque Data The engine information includes: Engine Label Notes (optional) Displacement Strokes/Engine Rev Volumetric Efficiency Engine Idle Speed Maximum Engine Speed A torque-engine speed relationship must also be specified. In SwashSim, this relationship is modeled by using a piece-wise function of multiple linear segments spanning the range of engine speed values. The first engine speed-torque data point should correspond to zero and the last point should should correspond to the maximum engine speed and its torque value. Intermediate engine speed-torque data points should correspond to where there is a significant change in slope of the torque curve. More data points translates to additional processing time, so only enough data points to reasonably replicate the torque-engine speed relationship should be specified. Power values are calculated automatically. Each vehicle also needs to have transmission characteristics specified for it. To specify the vehicle’s transmission information, press the ‘Edit Transmission Data’ button. This will load the following dialog. Figure 5.7: Vehicle Transmission Data The transmission information includes: Transmission Label Notes (optional) Drive Axle Slippage Drivetrain Efficiency Differential Gear Ratio Transmission gearing information, which includes: Gear number Gear ratio Downshift speed Upshift speed Guidance for setting upshift and downshift speeds forthcoming. The data needed for the vehicle characteristics listed above can be found on the internet for just about any vehicle on the road. For newer vehicles, vehicle manufacturer websites is a good starting place. A good source for such information for a wide range of vehicle makes and model years is at the automobile catalog [https://www.automobile-catalog.com]. "],["ChapterNetworkStructure.html", "6 Network Structure 6.1 Overview 6.2 Node Properties 6.3 Common Link Properties 6.4 Two-lane highway-only Link Properties 6.5 Lane Data 6.6 Upstream/Downstream Connecting Link/Lane IDs Example", " 6 Network Structure 6.1 Overview A SwashSim network is composed of the following components: Nodes (entry, connector, exit) Entry Vehicles enter the network at entry nodes ID numbering: Entry node numbering starts at 701 and increments by 1 with each successive entry node added to the network Exit Vehicles exit the network at entry nodes ID numbering: Exit node numbering starts at 801 and increments by 1 with each successive exit node added to the network Ramp connector Used to identify a link as an on- or off-ramp connecting to a freeway mainline segment ID numbering: Ramp connector node numbering starts at 601 and increments by 1 with each successive ramp connector node added to the network Connector Connector nodes are used in all other link connection circumstances Links (entry, connector, exit) Each link is bounded by an upstream node and downstream node ID numbering: Concatenation of upstream and downstream node ID’s, in direction of travel The upstream and downstream links that each link connects to must be specified (entry links have no upstream connecting links and exit links have no downstream connecting links) Lanes ID numbering From outside to inside (lane 1 is outer most lane) Types Regular, Left Turn Bay, Etc. The upstream and downstream lanes that each lane connects to must be specified Control Points These are placed at various positions within a lane and are tied into signalized, unsignalized, and ramp metering control logic. Detectors Detectors allow one to set points along a link to measure specific traffic flow parameters, such as speed, volume, etc. Detectors are also used with actuated signal and ramp metering control. 6.2 Node Properties 6.2.1 X/Y Coordinates Each coordinate has an X and Y position. The units are feet. However, the absolute coordinate values are irrelevant–only the relative coordinate positions between nodes are relevant to the internal SwashSim calculations. In the Freeway and Two-Lane Highway modules, these coordinate values are automatically created (as a function of link length, orientation, and curvature). In the Custom network creation module, these coordinate values must be explicitly specified. 6.2.2 Entry Node Inputs Flow Rate (veh/h) Fleet Type Percentages Driver Type Percentages 6.3 Common Link Properties 6.3.1 Upstream/Downstream Node ID A link has a beginning (upstream) and ending (downstream) node. Link ID values are created by concatenating the upstream and downstream node ID values. For example, Link ID ‘12’ corresponds to a link that has upstream node ID ‘1’ and downstream node ID ‘2’. The upstream and downstream node IDs are set automatically in the various network creation user interface (UI) screens. However, those values can be overridden by the user in the ‘Custom’ network creation module. 6.3.2 Length Freeway and Two-Lane Highway modules: For tangent segments, the link length is entered in this cell. For curved links, the link length will be based on the curve radius and central angle. Consequently, the length cell for a curved link will be colored gray, indicating that it cannot be edited directly. User input of length is restricted to integer values; however, the program may replace entered values with decimal values as a consequence of curved links and/or coordinate point adjustments. Custom network module: The length is automatically calculated for both tangent and curved links. It is based on the entered upstream and downstream node coordinate values, as well as the control point coordinate values for curved links. 6.3.3 Orientation Angle This input corresponds to a compass angle based on the direction of travel. Figure 6.1: Orientation Angle For example, the segment angle would be set as follows for the given travel directions: \\(0^\\circ\\) for perfectly horizontal east-to-west travel \\(180^\\circ\\) for perfectly horizontal west-to-east travel \\(90^\\circ\\) for perfectly vertical south-to-north travel \\(270^\\circ\\) for perfectly vertical north-to-south travel. In the Freeway and Two-Lane Highway quick editor screens, the orientation angle only needs to be specified for the first link. Subsequent link orientation angles are calculated by the program and are a function of the previous link orientation angle and any specified horizontal curvature. In the Custom network creation module, the orientation angle is calculated by the program, based on the entered node coordinate positions. 6.3.4 Horizontal Curvature A link can either be straight (i.e., tangent) or curved. If it is a curved link, additional inputs are required, specifically: 6.3.4.1 Control Point X/Y Coordinates Horizontal curves are represented as a 3-point (quadratic) Bezier curve. The control point is a point in between the link start and end points that affects the amount of curvature of the link. In the freeway and two-lane highway network creation modules, these values are set to provide as close a match as possible to the alignment of the curve per the circular curve inputs of radius and central angle. In the Custom network creation module, the control point inputs are used in lieu of curve radius and central angle inputs. 6.3.4.2 Turning Direction This property specifies the general turning direction of the curve (right or left) relative to the direction of travel. 6.3.4.3 Curve Radius Horizontal curve radius is entered in units of feet. 6.3.4.4 Central Angle Horizontal curve central angle is entered in degrees. 6.3.4.5 Superelevation Horizontal curve superelevation is entered in percent. 6.3.5 Grade The percent incline or decline of the segment. This is measured as the elevation change over the length of the segment divided by the segment length, multiplied by 100. 6.3.6 Free-Flow Speed For tangent links, the free-flow speed must be explicitly specified. For curved links, the free-flow speed can be explicitly specified or it can be estimated. In the latter case, the free-flow speed is estimated according to the model discussed [[Desired Speed|here]]. Units of entry are ft/s. 6.3.7 Downstream Vehicle Turning Percentages Currently, the assignment of a vehicle’s turning movement (left, through, or right) at the end of its current travel link is done at the moment it exits its previous travel link. This turning movement assignment is performed by drawing a uniform random number (between 0 and 1) and comparing to the specified turning percentages. The specified turning movement percentages can be applied to all vehicle fleet types equally, or can be varied by fleet type. The latter condition is useful, for example, in situations where one of the downstream connecting links connects to a route that prohibits large trucks. 6.3.8 Upstream/downstream connecting link ID’s The upstream and downstream links that each link connects to must be specified Entry links have no upstream connecting links–ID values should be set to zero Exit links have no downstream connecting links–ID values should be set to zero An example of how to code these connections is shown below 6.3.9 Upstream/downstream connecting lane ID’s The upstream and downstream lanes that each lane connects to must be specified Lanes that have no upstream connecting lane (e.g., a left-turn bay) should have a connecting ID value of zero Lanes that have no downstream connecting lane (e.g., an acceleration) should have a connecting ID value of zero An example of how to code these connections is shown below 6.4 Two-lane highway-only Link Properties 6.4.1 Passing in Oncoming Lane The options for passing in the oncoming lane are: Allowed ‘Direction 1’ Allowed ‘Direction 2’ Allowed Both Directions Not Allowed 6.4.2 Passing/Climbing Lane Direction The options for passing/climbing lane direction are: None Direction 1 Direction 2 Both Directions 6.4.3 Passing/Climbing Lane Rule If a passing/climbing lane has been specified, one of the following driving rules can be specified: Slow Vehicles Move Over Fast Vehicles Move Over 6.5 Lane Data 6.5.0.1 Lane Types Regular - A lane that always extends the full length of a link. Left, through, and right turn movements can be assigned to this lane type. Turn Bay Left - A left turn bay can be set to a length shorter than the full length of the link. The turn bay lane will always terminate at the downstream end of link. Turn Bay Right - A right turn bay can be set to a length shorter than the full length of the link. The turn bay lane will always terminate at the downstream end of link. Acceleration - An acceleration lane can be set to a length shorter than the full length of the link. Such a lane will always start at the upstream end of link. A distinguishing feature of an acceleration lane is that when a vehicle enters such a lane, from an on-ramp for example, the vehicle will immediately be tagged as needing to make a Mandatory Lane Changing and will look to move into the adjacent lane as soon as it identifies a suitable gap. For a regular lane that does not connect to a lane on the downstream link, a vehicle may make a Discretionary Lane Changing into the adjacent lane well upstream of the end of the lane, but it will not get tagged to make a mandatory lane change until it gets close to the point where it would have to begin slowing to a stop to avoid running off the end of the lane if it is not able to move to the adjacent lane. Deceleration - An deceleration lane can be set to a length shorter than the full length of the link. Such a lane will always terminate at the downstream end of link. Similar to an acceleration lane, a vehicle destined for a deceleration lane, to access an off-ramp for example, will look to move into the deceleration as soon as it identifies a suitable gap. Auxiliary - An auxiliary lane is a continuous lane connecting a freeway on-ramp to an off-ramp, a configuration often seen in ‘weaving’ sections. This lane type essentially combines the characteristics of an acceleration lane and a deceleration lane. Passing Lane - Used with the ‘Two-Lane Highway Passing Lane’ link type. This lane has additional properties that can be defined that affect the passing, or not-passing, behavior of vehicles within this link. Passing Oncoming Lane - Used with the ‘Two-Lane Highway Basic’ link type. When specifying this link type, the lane used for passing in the oncoming direction will be automatically set up by the program. Median - Currently, the only option for this ‘lane’ type is a raised median–it cannot be used for vehicle travel; thus, it is ignored in all vehicle movement logic. In the animation, it will have a green background color. A median lane cannot be used on entry or exit links. It should be noted that certain vehicle movement behavior can be obtained with more than one lane type. In some cases, however, the lane type can help bypass certain portions of the vehicle movement logic and potentially reduce the simulation time. As one example, a regular lane could be set up to allow only left-turn movements. However, for a vehicle making a through movement to the next link, such a lane would still be checked as a possibility for discretionary lane changes. Once the allowed movement (i.e., left only) of the lane is checked, it would be ruled out for a lane change candidate. But the additional step of checking the allowed movements for the lane can be skipped altogether once the initial check of the lane type (i.e., left turn bay) is made. Another note regarding lanes designated for only a turning movement–a turn bay can also be created with a separate link, adjacent to another link that allows other movements. In this situation, vehicles will only be able to enter the turn bay at the beginning the link. This would be appropriate for situations in which there is a median or another separation method, such as ‘candlestick’ style traffic cones or a low-profile curb, separating the turn bay from the adjacent lanes. If the turn bay lane type is part of a link with other lanes, vehicles will be able to move into the turn bay lane at any point along its full length. 6.5.0.2 Lane Turn Movements Through Only Right Only Left Only Through + Right Through + Left Left + Right Through + Right + Left 6.5.1 Lane Objects Detector and traffic control point objects can be placed within individual lanes of a link. Information about how to insert detectors and control points can be found in the following three chapters. 6.5.1.1 Detectors Detectors are objects that can be placed in individual lanes of a link to record various measures of passing vehicles, as indicated in the Performance Measures. Detector objects are point detectors and generally measure vehicle operational attributes, such as speed, instantaneously, at the time the front edge of a vehicle crosses the leading (upstream) edge of a detector. Detectors do have a length property so they can also mimic the operation of a physical inductance loop detector (ILD). The default length is 6 ft but can be changed as necessary. The length is used for the purpose of replicating the measurement of lane occupancy. See the Performance Measures chapter for more information about the lane occupancy measurement. The time a detector is occupied by a vehicle is counted from the time the front edge of a vehicle passes the leading (upstream) edge of the detector until the rear edge of the vehicle passes the downstream edge of the detector. A single physical ILD cannot directly measure vehicle speed because the length of any given vehicle crossing the detector is not known. Thus, to measure speed, two detectors are placed closely together (far enough apart to avoid electrical interference between the two, but close enough such that any change in vehicle speed between the two detectors will be negligible. With this setup, the speed is calculated as the distance between the leading edges of the two detectors (usually about 6 feet) divided by the difference in actuation times of the respective detectors. This approach is not need in simulation since the simulation engine keeps track of all vehicle properties for every simulation time step. Available detector functions: Unassigned - use this function when the detector will only used for recording traffic stream measurements Actuated Signal - use this function for registering vehicle calls with an actuated signal controller Ramp Meter Mainline - use this function for coordinating freeway mainline traffic performance measurements with a traffic-responsive ramp metering control algorithm Ramp Meter Presence - use this function for identifying when a vehicle is waiting at a ramp meter signal Ramp Meter Passage - use this function for identifying when a vehicle has passed beyond a ramp meter signal Ramp Meter Queue Intermediate - use this function for coordinating on-ramp intermediate queue spillback measurements with a traffic-responsive ramp metering control algorithm Ramp Meter Queue Advance - use this function for coordinating on-ramp advance (i.e., start of ramp) queue spillback measurements with a traffic-responsive ramp metering control algorithm 6.5.1.2 Traffic Control Points Traffic control points provide a mechanism to facilitate interaction between vehicles and traffic control devices. For example, they are utilized at a signalized intersection to “communicate” the displayed signal indication to a specific lane on an approach link. Control points are placed within lanes of a link. Generally, they are placed at the location where you want the vehicle to respond to it. In the case of a signalized intersection or approach controlled by a stop sign, this position would correspond to the stop bar location. Available control point types: Signalized Ramp meter Stop Yield 6.6 Upstream/Downstream Connecting Link/Lane IDs Example Figure 6.2: Sample Network 6.6.0.1 Nodes Node ID Coordinates Connected Links X Y 701 100 100 7011 1 400 100 7011, 12 2 700 100 12 3 700 88 34 4 1000 88 34, 48 5 1000 100 59 6 1000 112 67 7 1100 200 67, 7801 8 1100 0 48, 8803 9 1200 100 59, 9802 801 1100 350 7801 802 1400 100 9802 803 1100 -150 8803 6.6.0.2 Connecting Link IDs Link ID Upstream Connecting Link ID Downstream Connecting Link ID Left Through Right Left Through Right 7011 0 0 0 0 12 0 12 0 7011 0 0 34 0 34 0 12 0 48 59 67 67 0 34 0 0 7801 0 59 0 34 0 0 9802 0 48 0 34 0 0 8803 0 7801 0 67 0 0 0 0 9802 0 59 0 0 0 0 8803 0 48 0 0 0 0 6.6.0.3 Connecting Lane IDs Link ID Lane ID Upstream Connecting Lane ID Downstream Connecting Lane ID Left Through Right Left Through Right 7011 1 0 0 0 0 1 0 2 0 0 0 0 2 0 12 1 0 1 0 0 1 0 2 0 2 0 0 2 0 34 1 0 1 0 0 1 1 2 0 2 0 0 2 0 3 0 0 0 1 0 0 67 1 0 1 0 0 1 0 59 1 0 1 0 0 1 0 2 0 2 0 0 2 0 48 1 0 3 0 0 1 0 7801 1 0 1 0 0 0 0 9802 1 0 1 0 0 0 0 2 0 2 0 0 0 0 8803 1 0 1 0 0 0 0 "],["ChapterFreewayQuickEditor.html", "7 Freeway Quick Editor 7.1 Main Input Screen 7.2 Segment Input Fields", " 7 Freeway Quick Editor 7.1 Main Input Screen The main input screen (see Figures below) is where the roadway geometry is specified. This is done by adding segments/links where you can set the length, initial angle, free-flow speed, grade, and so on. You can insert a basic segment, on-ramp segment, or off-ramp segment with the toolbar buttons above the segment table. Click ‘Delete Link’ to delete the currently selected segment. The segment characteristics assume an east-to-west or north-to-south direction of entry. Figure 7.1: Freeway Facility Quick Editor (1) Figure 7.2: Freeway Facility Quick Editor (2) 7.2 Segment Input Fields The data inputs and entry process are largely the same as those for the two-lane highway facility (the freeway has an input for the number of lanes but does not include inputs for a passing lane). More detail on all inputs are described [[Network Structure|here]]. 7.2.1 Detectors The detector input screen for the freeway facility only accommodates one direction. To set detectors on a segment click on ‘Set’ under ‘Set Detector(s)’ to open the Detectors dialogue box (see Figure below). Figure 7.3: Detector Setup Screen 7.2.2 Entering Traffic Data For a freeway facility, traffic enters at the beginning of the mainline and from each on-ramp. The traffic data entry dialog (similar to the one for two-lane highways, but for just one direction) can be accessed for each facility entry point by pressing the ‘Set’ button under the ‘Traffic Data’ column. This button will be highlighted in yellow for the segments for which entering traffic data can be specified. Figure 7.4: Traffic Data Entry Screen 7.2.3 Exiting Traffic Data For off-ramp segments, the exiting percentage of traffic needs to be specified. This entry is accessed in the same way as for the entering traffic data. Figure 7.5: Traffic Data Exit Screen To save your created network and traffic data to disk, see User Interface Overview. "],["TwoLaneHighwayQuickEditor.html", "8 Two-Lane Highway Quick Editor 8.1 Main Input Screen 8.2 Segment Input Fields", " 8 Two-Lane Highway Quick Editor 8.1 Main Input Screen The main input screen (See Figures below) is where the roadway geometry is specified. This is done by adding segments/links where you can set the length, initial angle, free-flow speed, grade, and so on. Click ‘Add New Link’ to add a new roadway segment, click ‘Insert New Link’ to add a new roadway segment above the current segment you have selected, click ‘Delete Link’ to delete the currently selected segment. Figure 8.1: Two-Lane Highway Facility Quick Editor 8.2 Segment Input Fields Links and their corresponding characteristics are specified for the west-to-east or north-to-south travel direction (considered ‘Direction 1’) and the inputs for the opposing travel direction (considered ‘Direction 2’) are automatically created by the program. 8.2.1 Upstream/Downstream Node ID The node ID values are automatically created upon adding/inserting a new link. These same node ID values are used for the links in the opposing direction (which again, are created automatically by the program). Thus, the link ID for the opposing direction for link ID ‘12’ would be ‘21’, ID ‘32’ for the opposing direction link to link ID ‘23’, and so on. 8.2.2 X Coord Start/X Coord End and Y Coord Start/Y Coord End The start and end coordinates for each segment. These values are automatically created, based on the length and orientation angle, and horizontal curve inputs. 8.2.3 Length For tangent segments, the link length is entered in this cell. For curved links, the link length will be based on the curve radius and central angle. Consequently, the length cell for a curved link will be colored gray, indicating that it cannot be edited directly. User input of length is restricted to integer values; however, the program may replace entered values with decimal values as a consequence of curved links and/or coordinate point adjustments. 8.2.4 Horizontal Curve Specific Inputs If the segment corresponds to a horizontal curve, select ‘Yes’ for “Is a Curve?”. If this is done, additional segment inputs will be enabled, specifically: superelevation, curve radius, central angle, and curve direction (this latter input corresponding to the general turning direction of the curve). Filling in the central angle and radius of the curve will automatically adjust the segment length and control points accordingly. 8.2.5 2 + 1 Section Not currently functional. The intent for this future feature is to be able to display a 2+1 section as a 3-lane section, with the passing lanes in the middle of the section. A 2+1 section can still be simulated by combining passing lane segments and non-passing lane segments. In this case, however, the passing lanes will be to the right of the regular lanes. You will also need to specify “fast vehicles move over” for the passing lane rule. 8.2.6 Control Point X/Control Point Y These input fields will only be editable for curved links. Inputs not discussed in this section, as well as more information on the inputs mentioned here, are described in the Network Structure chapter. 8.2.6.1 Detectors Detectors allow one to set points along the segment to measure specific traffic flow parameters, such as speed, volume, etc. To set detectors on a segment click on ‘Set’ under ‘Set Detector(s)’ to open the Detectors dialogue box. A detector’s location along the segment is specified by a percentage of the length of the segment. For example, with a 5280-ft segment, a detector set at 25% would be located at 1320 ft in the travel direction. Click ‘OK’ when done. Figure 8.2: Two-Lane Highway Detector Entry Form 8.2.7 Entering Traffic Data Press the ‘Traffic Data’ button in the toolbar near the top of the screen to access the ‘Entry Link Inputs’ form (see Figures below). Figure 8.3: Two-Lane Highway Traffic Data Toolbar Button (#fig:TwoLaneTrafficData.png)Two-Lane Highway Traffic Data Entry Screen In this screen, the overall entry flow rate per direction and the percentage split for each vehicle type can be specified. After setting values for ‘Direction 1’, press the ‘Save Changes’ button before selecting ‘Direction 2’. After setting values for ‘Direction 2’, press the ‘Save Changes’ button again before closing the form. To save your created network and traffic data to disk, see User Interface Overview. "],["ChapterCustomNetwork.html", "9 Custom Network Editor 9.1 Node Data Screen 9.2 Link Data Screen 9.3 Map Manipulation Functions and Display Options", " 9 Custom Network Editor Network creation in Custom mode is done in the Map View screen. Figure 9.1: Map View Toolbar Button After selecting the ‘Custom’ option in the New Project dialog, the program will switch to Map View. The following figure shows the Map View, with a previously created network displayed. When starting a new project, the map area will be empty. Press the Network Edit Tools toolbar button (1) to toggle on the display of the network editing toolbar (2). Figure 9.2: Map View (1) There are two ways to add nodes to the map: Direct Node Add: With this method, node type and coordinate values are specified through a dialog rather than interacting with the map. Press the Direct Node Add button (4) for this method. After closing the dialog, the node will be displayed on the map. Use the cursor and map to create nodes: With this method, you use the Entry Node (1), Exit Node (2), and Connector Node (3) buttons to place the respective nodes on the map with the cursor. Note that these buttons work in a toggle mode–you press the toolbar button to turn on/off the node adding functionality for the respective node type. After placing a node on the map, you can edit the node coordinates through a dialog accessed through the Network Info panel (see Node Data Screen section below). Note that both of these methods can be used simultaneously to create nodes for a given network. To connect two nodes with a link, press the Create Link button (5). Note that this button will not be active if one of the add node buttons is active. Pressing the Create Link button will display a dialog that will allow you to create a link connecting any two existing nodes and all of the corresponding link properties (see Link Data Screen section below). Note the following: to create an entry link, you must have added at least one entry node (numbered 701-799) and one connector node (numbered 1-699). to create an exit link, you must have added at least one exit node (numbered 801-899) and one connector node. to create a connector link, you must have added at least two connector nodes. Figure 9.3: Map View (2) Pressing the ‘Network Coding Check Panel’ button (7) will toggle on/off a panel at the bottom of the screen for displaying network coding errors/warnings. Press the ‘Check for Network Coding Errors/Warnings’ button in this lower panel to identify any network coding issues. Once the message “No network coding errors were found.” is displayed, you will be able to successfully run a simulation for your network. Since a node can be used for more than one link, it is best to not place more than one node at the same x/y position, although it will not cause any errors. It just makes network coding debugging more challenging since you will only see the top node displayed (usually the highest numbered). To identify all nodes with the exact same x/y coordinates, press the ‘Check for Overlapping Nodes button’. Note that you can select the text in the output window, copy it (with the keyboard combination of CTRL+C) and paste into any text editor application. Figure 9.4: Map View (3) The Network Info button will toggle on/off a panel that provides a tabular listing of links and nodes present in the network. Figure 9.5: Map View–Networ Info Figure 9.6: Map View (4) If a specific link is selected in this table (clicking on the row header) or clicked on in the map, the top part of the network information panel will display the values of some of the more frequently referenced link properties. The link and node editing dialogs can also be accessed from the table displays. Figure 9.7: Map View (5) 9.1 Node Data Screen The Node Data screen (see Figure below) can be loaded by pressing the Edit button for an existing node in the Network Info ‘All Nodes’ listing. Nodes placed on the map that are connected to any links will also be listed separately in the ‘Unused Nodes’ listing. Unused nodes can be deleted. Nodes connected to one or more links can only be deleted after they have been disconnected from all links. Node coordinates can be revised for unused links in this dialog. The coordinates for nodes that are connected to a link must be changed from the Link Data dialog. A node ID value can be changed by pressing the Change ID Value button and entering a new ID value. The program will first check if the ID is currently in use by another node. If the ID value is changed, the corresponding link IDs that are connected to the subject node will be updated. Figure 9.8: Node Data Dialog 9.2 Link Data Screen The Link Data screen can be loaded in three ways: Pressing the Create Link button Pressing the Edit button for an existing link in the Network Info ‘Links’ listing Right-clicking on an existing link with the mouse and selecting the Edit Link option in the popup menu Select the link type: Arterial Connector: Use this link type for any type of roadway that is not a freeway or two-lane highway Arterial Entry Arterial Exit Freeway: A freeway connector link Freeway On-Ramp: Use for a link that serves as an on-ramp to the freeway mainline Freeway Off-Ramp: Use for a link that serves as an off-ramp from the freeway mainline Freeway Mainline Entry: An entry link to the freeway mainline Freeway Entry: An entry link (upstream) that connects to a freeway on-ramp link (downstream) Freeway Exit: An exit link (downstream) that connects to either the freeway mainline (upstream) or a freeway off-ramp link (upstream) Two-Lane Highway Basic: A two-lane highway connector link that consists of one lane in the travel direction Two-Lane Highway Passing Lane: A two-lane highway connector link that consists of two lanes in the travel direction Two-Lane Highway Entry Two-Lane Highway Exit Figure 9.9: Link Data Dialog The upstream and downstream node number fields will initially be populated with values, as follows: Entry Link: the upstream node number will be +1 greater than the currently largest entry node number (e.g., 701 -&gt; 702). The downstream node number will be +1 greater than the currently largest connector node number (e.g., 1 -&gt; 2). Connector Link: the upstream node number will be +1, and the downstream node number +2, greater than the currently largest connector node number. Exit Link: the upstream node number will be +1 greater than the currently largest connector node number (e.g., 2 -&gt; 3). The downstream node number will be +1 greater than the currently largest exit node number (e.g., 801 -&gt; 802). 9.2.1 Lane Data 9.2.1.1 Connecting Lanes This dialog is used to specify the upstream and downstream connecting ID’s for each lane. An example of how to specify this coding can be found here. Figure 9.10: Upstream/Downstream Connecting Lane IDs 9.2.1.2 Detectors This dialog is used to place one or more detectors in the selected lane for the selected link. Press the ‘Add Detector’ button to place a detector. The ‘Position (ft)’ field is calculated automatically, based on the entered ‘Position (%)’ value. These values are referenced to the upstream start of the link. Information about detector objects can be found here. Figure 9.11: Detectors Screen 9.2.1.3 Control Points This dialog is used to place one or more traffic control points in the selected lane for the selected link. Press the ‘Add Control Point’ button to place a control point. The ‘Position (ft)’ field is calculated automatically, based on the entered ‘Position (%)’ value. These values are referenced to the upstream start of the link. Information about traffic control point objects can be found here. Figure 9.12: Control Points Screen 9.2.2 Traffic Data Traffic data is entered for entry links. The applicable links have a yellow-colored ‘Edit’ traffic data button. This button loads the following input screen. Figure 9.13: Traffic Data Entry Screen In this screen, the entry flow rate and fleet type percentages are input. To save your inputs before exiting the input screen, press the “Save Changes” button. Values from the fleet percentages table can be copied from one input screen to another by selecting “Copy Values to Clipboard” in one screen and selecting “Paste Values from Clipboard” in another. 9.3 Map Manipulation Functions and Display Options The tools in the following toolbar provide a variety of functions for manipulating the display of the network. Figure 9.14: Map View Toolbar The buttons shown below can be used to zoom in/out the network display. The scroll wheel of a mouse can also be used to zoom the network display in and out. Figure 9.15: Map View Zoom In/Out Buttons Pressing the ‘Show Entire Network’ button will display the entire network within the Map View screen boundaries. To re-position the network within the Map View screen, hold down the left mouse button and move the mouse as appropriate. The Map View screen scroll bars can also be used for this purpose. Figure 9.16: Show Entire Network Button The ‘Show Network Nodes’ button is used to toggle on/off the display of the nodes on the network. Figure 9.17: Show Network Nodes (1) Figure 9.18: Show Network Nodes (2) Selecting a link, by clicking on it with the left mouse button, will change the color of the link to purple. This selection will also be coordinated with the link/lane properties display, if enabled, as discussed earlier in this chapter. Figure 9.19: Selecting a Link The ‘Show Lane IDs’ button is used to toggle on/off the display of lane numbers within the links. Figure 9.20: Show Lane IDs Pressing the ‘Background Color’ button will open a new dialog that provides the ability to change the background color within the Map View. Figure 9.21: Show Lane IDs Pressing the ‘Vehicle Colors’ button will open a new dialog that provides the ability to change the colors used for the vehicle objects during a simulation animation. Figure 9.22: Show Lane IDs "],["ChapterSignalizedIntersections.html", "10 Signalized Intersections 10.1 Traffic Control Screen 10.2 Pretimed Signal Phasing and Timing Inputs 10.3 Actuated Signal Control", " 10 Signalized Intersections This section discusses how traffic signal control settings are specified in SwashSim. 10.1 Traffic Control Screen Figure 10.1: Toolbar Traffic Control Button Pressing the ‘Traffic Control’ button on the toolbar will load the controller setup screen. Pressing the ‘Add Pretimed Controller’, ‘Add Actuated Signal Controller’ or ‘Add On-Ramp Signal Controller’ will add a signal controller entry to the table immediately below the button. Pressing the ‘Edit’ button for a given controller under the ‘Edit Timing Plan’ column will load the signal timing and phasing inputs screen (discussed below). Figure 10.2: Traffic Control Main Screen 10.2 Pretimed Signal Phasing and Timing Inputs Pressing the ‘Set Phasing &amp; Timing’ button on the main inputs screen will load the ‘Signal Phasing and Timing Inputs’ screen. Figure 10.3: Pretimed Signal Controller Settings (1) To add a timing stage, press the “Add Timing Stage” button. This will highlight the next available Timing Stage box in yellow. To edit a Timing Stage, click the desired stage so that it is highlighted in yellow. Timing stages are used to specify the phases (1-8) that will move (i.e., receive green) simultaneously. To add a traffic movement to the timing stage, click on the desired movement arrow(s) in the ring/barrier diagram. To remove a movement, click on the corresponding arrow in the ring/barrier diagram. If movement is selected that conflicts with another movement in that timing stage, an error message will appear and the movement arrow will not be added to the timing stage. For each timing stage, the green (G), yellow (Y), and all-red (AR) times need to be specified. To edit a timing interval, click on the appropriate table cell to highlight it in blue and type in the desired number. Press the ‘Tab’ or ‘Enter’ key to save edits. Note that the number in the left-most column corresponds to the timing stage number. The figure below shows an example timing stage plan. Figure 10.4: Pretimed Signal Controller Settings (2) When the timing stage movements and corresponding interval times have been specified, the last step is to select ‘Create Signal Controller Phasing/Timing Plan’. This will generate a timing plan that is used by the dual-ring signal controller. Figure 10.5: Pretimed Signal Controller Settings (3) If revisions are made to the timing stages and/or interval times, press the ‘Create Signal Controller Phasing/Timing Plan’ again to create a new signal controller timing plan. The last timing plan that is generated is the one that is stored in memory. The simulation program will continue to store this timing plan in memory for the duration of the current session. If you want to save the timing plan to disk, press the “Save To File” button in the Traffic Control Setup screen after existing the controller settings screen. 10.2.1 Phase Control and Detector Assignments Select the Phase Control and Detector Assignments tab to specify the signalized control points and/or detectors that associated with each signal phase. Figure 10.6: Pretimed Signal Controller Settings (4) Pressing the Select button for a given phase will load the control points/detectors selection screen (an example for control points is shown in the following figure). After checking the desired control points/detectors and closing, the selections will be displayed in the table on the controller settings screen. Figure 10.7: Traffic Signal Control Points Selection 10.2.2 Coordination Settings Coordination settings can be specified under the corresponding tab. The inputs on this tab are as follows: Figure 10.8: Pretimed Signal Controller Settings (5) Coordination?: Check this box to enable coordination for the selected intersection controller Master Controller?: This box should be checked for only one of the intersections among the group of intersections to which you are applying coordination settings. Generally, the intersection selected as the ‘Master’ should be the most upstream intersection for the direction of coordination. For example, if coordination is being set up for a series of four intersections for the eastbound direction of travel… -&gt; (2) -&gt; (3) -&gt; (4) intersection (1) should be selected as the master intersection. Reference Phase ID: This value corresponds to the phase number (1-8) of the coordinated movement. For example, if the eastbound through movement is being coordinated, this value should be set to ‘2’. Cycle Lengths (s): This value is calculated from the previously entered timing stage settings (green, yellow, all-red). It is for information purposes only and cannot be modified on this screen. If you return to the Timing Stage Settings tab and change any of the timing values there and then return to the Coordination Settings tab, the cycle length value will be updated accordingly. Offset(s): ** For the master intersection, this value should correspond to the number of seconds the coordinated phase starts relative to the start of the cycle (i.e., 0). For example, assume a timing plan starts with leading left turns for the eastbound and westbound approaches (phases 5 and 1) in timing stage 1, with a duration of 20 seconds (G+Y+AR), and then serves the eastbound and westbound through movements (phases 2 and 6) in timing stage 2. Assuming the coordinated movement is the eastbound through movement, the offset value should be set to 20; i.e., the coordinated movement starts 20 seconds after the start of the cycle, assuming a cycle start time of 0 seconds for the master intersection. ** For coordinated intersections downstream of the master intersection, the offset value should be set to the number of seconds that you want the reference phase to start after the start of the reference phase at the master intersection. See (Mannering and Washburn 2019) for more information about signal coordination concepts. 10.3 Actuated Signal Control After adding an actuated signal controller, press ‘Edit’ under ‘Edit Timing Plan’ to open the Timing Plan Data window. Figure 10.9: Actuated Signal Controller Settings (1) Use the ‘Add Phase’ and ‘Remove Phase’ buttons to add and remove phases to the table on the right. To edit a phase, click on the desired cell so that it is highlighted blue, type the Phase Number (1 through 8) and press tab to move to the next cell. All cells except for Recall Mode should be numerical inputs and then use the drop-down menu to assign a recall mode for each phase. For more information on signal timing, see [[Traffic Signal Control Concepts#Basic Signal Timings|Basic Signal Timings]]. Figure 10.10: Timing Plan Data (Add, Remove Phase) Once the phases are created in the table, then click on ‘Edit Phase Sequence’ to set phases to corresponding rings. Use the ‘Number of Rings’ drop down menu to select the number of rings to be used in the intersection. Then, in a similar manner in the Timing Plan Data window, use the ‘Add New Row’ and ‘Remove Current Row’ buttons to create a table for ring information. For the typical two-ring, eight-phase timing plan, insert six rows and then use the drop down menu to select ‘Barrier’ for rows three and six. Figure 10.11: Timing Plan Data (Edit Phase Sequence) Figure 10.12: Phase Sequence Inputs Once the Phase Sequence Input table is complete, press ‘Close and Save Changes’. 10.3.1 Actuated Signal Controller File Setup Before adding an actuated signal controller, all detectors and control points must be setup for the intersection(s). The next steps involve the editing of the actuated signal control files labeled ActControlPoints, ActDetectors, and ActTimingPlan. The following steps describe the process for editing the actuated signal control files in order to get actuated signal control to work properly in SwashSim. These files are plain text files and can be edited within any text editing program. Example files can be found in the Actuated Signal Control example project on the SwashSim GitHub site. Once the actuated signal control files have been obtained, the first step is to set the directory location for the ControlPoints and Detectors files. This is done within the ActTimingPlan file. The following shows examples of this from an ActTimingPlan file. &lt;FilenameControlPoints&gt;C:\\Program Files\\SwashWare\\SwashSim\\Projects\\Signalized Intersections\\Actuated\\University_13th\\ActControlPoints.xml&lt;/FilenameControlPoints&gt; &lt;FilenameDetectors&gt;C:\\Program Files\\SwashWare\\Projects\\Signalized Intersections\\Actuated\\University_13th\\ActDetectors.xml&lt;/FilenameDetectors&gt; The next step is to edit the ActDetector file. This file is used to identify the detectors that are used by the actuated signal controller. The following shows an example of the code for one detector. Each detector at the intersection needs its own section of code. &lt;DetectorData&gt; &lt;Id&gt;1&lt;/Id&gt; &lt;ControllerId&gt;1&lt;/ControllerId&gt; &lt;ControlPhaseId&gt;2&lt;/ControlPhaseId&gt; &lt;LinkId&gt;56&lt;/LinkId&gt; &lt;LaneId&gt;1&lt;/LaneId&gt; &lt;LanePositionBeginFeet&gt;218&lt;/LanePositionBeginFeet&gt; &lt;LanePositionBeginPct&gt;95&lt;/LanePositionBeginPct&gt; &lt;LengthFeet&gt;6&lt;/LengthFeet&gt; &lt;LanePositionEndFeet&gt;224&lt;/LanePositionEndFeet&gt; &lt;/DetectorData&gt; Id: the value should always be 1 ControllerId: should be the controller number labeled on the timing plan data page ControlPhaseId: should correspond to the phase called by this detector LinkId: the link ID where this detector is located LaneId: the lane ID where this detector is located for the given link ID LanePositionBeginFeet: location of the detector within the link (as measured from upstream end of link) LanePostionBeginPct: location (as a percentage of the link length) of the detector within the link LengthFeet: length of detector in feet LanePositionEndFeet: the value of LanePositionBeginFeet + LengthFeet The next step is to edit the ActControlPoints file. This files is used to identify the control points that are used by the actuated signal controller. The following shows an example of the code for one control point. Each control point at the intersection needs its own section of code. &lt;VehicleControlPointData&gt; &lt;Id&gt;1&lt;/Id&gt; &lt;Control&gt;Signalized&lt;/Control&gt; &lt;ControllerId&gt;1&lt;/ControllerId&gt; &lt;ControlPhaseId&gt;2&lt;/ControlPhaseId&gt; &lt;TravDir&gt;NB&lt;/TravDir&gt; &lt;LinkId&gt;56&lt;/LinkId&gt; &lt;LaneId&gt;1&lt;/LaneId&gt; &lt;LaneIdsControlled&gt; &lt;unsignedByte&gt;1&lt;/unsignedByte&gt; &lt;/LaneIdsControlled&gt; &lt;PositionLaneFeet&gt;223&lt;/PositionLaneFeet&gt; &lt;PositionLanePct&gt;97&lt;/PositionLanePct&gt; &lt;/VehicleControlPointData&gt; Id: the value should always be 1 Control: this value indicates what type of control mode applies for the control point–for a signalized intersection this will be set to “Signalized” ControllerId: should be the controller number labeled on the timing plan data page ControlPhaseId: should correspond to the phase called by this detector TravDir: indicates the direction of travel for vehicles passing this control point (EB,WB,NB,SB,NEB,NWB,SEB,SWB) LinkId: the link ID where this detector is located LaneId: the lane ID where this detector is located for the given link ID LanePositionBeginFeet: location of the detector within the link (as measured from upstream end of link) LanePostionBeginPct: location (as a percentage of the link length) of the detector within the link LaneIdsControlled: Same as LaneId This completes the setup process for adding a new actuated signal controller to a SwashSim intersection project. "],["ChapterUnsignalized.html", "11 Unsignalized Intersections 11.1 Overview 11.2 Gap Acceptance 11.3 Limitations", " 11 Unsignalized Intersections 11.1 Overview Vehicles that are subject to control (yield or stop sign) at unsignalized intersections operate according to the rules of the road and gap acceptance theory. 11.2 Gap Acceptance Gap acceptance models begin with the recognition that two-way-stop-controlled (TWSC) intersections give no positive indication or control to the driver on the minor street as to when it is appropriate to leave the stop line and enter the major street. The driver must determine when a gap on the major street is large enough to permit entry, based on the relative priority of the competing movements. This decision-making process has been formalized analytically into what is commonly known as gap acceptance theory. Gap acceptance theory is the basis for the TWSC and roundabout intersections operations analysis of the Highway Capacity Manual (Transportation Research Board and National Academies of Sciences, Engineering, and Medicine (2022)). This theory includes three elements: Availability of Gaps Usefulness of Gaps Relative Proportions of Various Movements at the Intersection The availability of gaps is the proportion of gaps of a particular size on the major street offered to the driver entering from a minor movement, as well as the pattern of vehicle arrival times. The distribution of gaps between vehicles in the different streams has a major effect on the performance of the intersection. The second element pertains to how useful drivers find the size of the gap when attempting to enter into the intersection. It is generally assumed within gap acceptance that drivers are both consistent and homogeneous. However, studies have demonstrated that different drivers have different gap acceptance thresholds and even that the gap acceptance threshold of an individual driver often changes over time. The third element in gap acceptance theory concerns the ranking of each movement in a priority hierarchy. Typically, gap acceptance processes assume drivers on the major street are unaffected by the minor movements. If this assumption is not the case at a given intersection, the gap acceptance process has to be modified. For TWSC methodology, priority hierarchy must be identified for each movement. Movements can be categorized by right-of-way priority as follows: Movements of Rank 1 include through traffic on the major street, right-turning traffic from the major street, and pedestrian movements crossing the minor street. Movements of Rank 2 include left-turning and U-turning traffic from the major street, right-turning traffic onto the major street, and pedestrian movements crossing the major street. Movements of Rank 3 (subordinate to Ranks 1 and 2) include through traffic on the minor street (in the case of a four-leg intersection) and left-turning traffic from the minor street (in the case of a T-intersection). Movements of Rank 4 (subordinate to all others) include left-turning traffic from the minor street. Rank 4 movements occur only at four-leg intersections. Figure 11.1: TWSC Priority, Vehicular (solid arrows) and Pedestrian (dashed arrows) Movements (Transportation Research Board and National Academies of Sciences, Engineering, and Medicine (2022)) Headway times are used as a measurement instead of gaps due to the ease of calculation and requiring less information. Critical Headway and Follow-up Headway Critical headway, \\({t_c}\\), is defined as the minimum time interval in the major-street traffic stream that allows intersection entry for one minor-street vehicle. Thus, the driver’s critical headway is the minimum headway that would be acceptable. A particular driver would reject headways less than the critical headway and would accept headways greater than or equal to the critical headway. Critical headway can be estimated from observations of the largest rejected and smallest accepted headway for a given intersection. The time between the departure of one vehicle from the minor street and the departure of the next vehicle using the same major-street headway, under a condition of continuous queuing on the minor street, is called the follow-up headway, \\({t_f}\\). Thus, \\({t_f}\\) is the headway that defines the saturation flow rate for the approach if there were no conflicting vehicles on movements of higher rank. Computing Critical Headway and Follow-up Headway Critical Headway \\({t_{c,x}} = {t_{c,base}} + {t_{c,HV}}{P_{HV}} + {t_{c,G}}G-{t_{3LT}}\\) where: \\({t_{c,x}} =\\) critical headway for movement x (s), \\({t_{c,base}} =\\) base critical headway from “Base Critical Headways” (s) below, \\({t_{c,HV}} =\\) adjustment factor for heavy vehicles (1.0 for major streets with one lane in each direction; 2.0 for major streets with two or three lanes in each direction) (s), \\({P_{HV}} =\\) proportion of heavy vehicles for movement (expressed as a decimal; e.g., \\({P_{HV}} = 0.02\\) for 2% heavy vehicles), \\({t_{c,G}} =\\) adjustment factor for grade for given movement (0.1 for Movements 9 and 12; 0.2 for Movements 7, 8, 10, and 11) (s), \\(G =\\) percentage grade (expressed as an integer; e.g., \\(G = −2\\) for a 2% downhill grade), and \\({t_{3LT}} =\\) adjustment factor for intersection geometry (0.7 for minor-street left-turn movement at three-leg intersections; 0.0 otherwise) (s). Figure 11.2: Base Critical Headways for TWSC (Transportation Research Board and National Academies of Sciences, Engineering, and Medicine (2022)) Follow-up Headway \\({t_{f,x}} = {t_{f,base}} + {t_{f,HV}}{P_{HV}}\\) where: \\({t_{f,x}} =\\) follow-up headway for movement x (s), \\({t_{f,base}} =\\) base follow-up headway from “Follow-Up Headway” (s), \\({t_{f,HV}} =\\) adjustment factor for heavy vehicles (0.9 for major streets with one lane in each direction; 1.0 for major streets with two or three lanes in each direction), and \\({P_{HV}} =\\) proportion of heavy vehicles for movement (expressed as a decimal; e.g., \\({P_{HV}} = 0.02\\) for 2% heavy vehicles). Figure 11.3: Base Follow Up Headways for TWSC (Transportation Research Board and National Academies of Sciences, Engineering, and Medicine (2022)) Roundabouts The operation of roundabouts is similar to that of two-way STOP-controlled intersections. At roundabouts, however, entering drivers scan only one stream of traffic, the circulating stream, for an acceptable gap. 11.3 Limitations Two-stage gap acceptance (i.e., a situation applicable to a divided roadway with a median) is not yet implemented. "],["ChapterRampMetering.html", "12 Ramp Metering 12.1 Introduction 12.2 Pretimed 12.3 Demand/Capacity 12.4 ALINEA 12.5 Fuzzy Logic 12.6 Limitations", " 12 Ramp Metering 12.1 Introduction Ramp metering is used to control the flow of freeway on-ramp vehicles onto the mainline in an effort to prevent freeway flow breakdown, as well as improve the safety of merging operations. Determining effective ramp metering rates can be a complicated process because of the need to usually balance freeway, ramp, and arterial flows. Numerous ramp-metering algorithms have been developed. SwashSim currently implements the following algorithms: Pretimed Demand/Capacity ALINEA Fuzzy logic 12.2 Pretimed With pretimed ramp metering, the ramp signal operates with a constant cycle in accordance with a metering rate prescribed for a particular control period. With this approach, the fixed ramp rates are usually based on historical traffic observations, assuming that traffic patterns are fairly consistent. Advantages of the pretimed algorithm is that it is relatively low cost because detection infrastructure is not needed, and it also can effectively relieve localized recurrent congestion. The major disadvantage is that the system can neither respond automatically to significant changes in demand, nor adjust to unusual traffic conditions resulting from incidents. 12.3 Demand/Capacity With demand/capacity control, the on-ramp flow is determined as the difference between the upstream freeway flow (or occupancy) and the downstream capacity (or desired occupancy). The measurement of the freeway flow or occupancy occurs in real-time (i.e., measured in the previous time interval). The on-ramp flow is then expressed as the metering rate for the next control interval, based on the equation: \\[R(t) = c - q(t-1)\\] where: \\({R(t)}=\\) ramp−metering rate at time interval t, \\(c=\\) capacity of freeway section (predefined), and \\(q(t-1)=\\) upstream flow rate at time (t-1) (measured). This algorithm requires detectors to be located on the freeway mainline, immediately upstream of the merge point and downstream of the merge point. This method of control offers improvements over the pretimed method in that it can respond automatically to changes in traffic flow; however, detection is required. Disadvantages to this method include 1) measurement of the upstream freeway flow rate alone is not sufficient to determine whether the freeway is congested or free-flowing; and 2) for optimal system operation, accurate estimates of capacity are required. Alternatively, the algorithm can be based on occupancy measures instead of flow measures. The occupancy strategy relies on occupancy-based estimation of the upstream freeway flow. If the aggregated occupancy on the freeway downstream detector is above the critical occupancy, it hits the minimum metering rate, otherwise the metering rate is set as the difference between the capacity at the downstream detector and aggregated flow rate at the upstream detector. The demand/capacity algorithm logic is illustrated in the following figure. Figure 12.1: Demand/Capacity Algorithm Logic where: \\(O_{down}=\\) aggregated freeway occupancy downstream of merge point, \\(O_{desired}=\\) desired aggregated freeway occupancy downstream of merge point (considered as 20%), \\(Q_{up}=\\) aggregated freeway flow rate immediately upstream of merge point (veh/h), \\(C_{down}=\\) freeway capacity downstream of merge point (veh/h), MinMeteringRate = typically 180-240 veh/h, and MaxMeteringRate = typically 900-1200 veh/h. 12.4 ALINEA ALINEA is a simple but effective ramp metering strategy that utilizes a local traffic-responsive feedback loop to maintain maximum throughput at the downstream merge area of an on-ramp. The ALINEA algorithm calculates the metering rate at each time step by computing the difference between the downstream desired occupancy and the aggregated downstream occupancy at each time step, multiplying that difference by a regulator parameter, and adding that result to the metering rate of the previous time step. The following equation implicitly calculates the metering rate: \\[r(k) = r(k-1) + {K_{R}}\\times \\big(\\hat{O}-{O_{Out}}(k)\\big)\\] where: \\({r(k)}=\\) ramp−metering rate at time index k, \\({K_{R}}=\\) constant regulator, \\(\\hat{O}=\\) desired downstream occupancy, \\({O_{Out}}(k)=\\) aggregated downstream occupancy at time index k. Detectors are placed on every freeway lane 500 m downstream of the acceleration lane. The detector data for each lane is aggregated together at each time step to calculate the occupancy value that is compared to the desired occupancy. The on-ramp contains two detectors: a presence detector directly behind the ramp meter signal controller and a passage detector immediately after the ramp meter signal controller. The presence detector ensures that the signal rests on red when no vehicles are detected and ensures that the ramp metering algorithm is being applied when a vehicle is detected. The passage detector ensures that the system does not break down in case vehicles stay queued up behind the signal controller. The figure below illustrates the ALINEA setup used in SwashSim. Figure 12.2: Detector Setup for ALINEA Algorithm The ALINEA flow chart below reads as follows: Start. Set time step to 1. Calculate the downstream mainline occupancy at the current time step. Calculate the metering rate using the occupancy calculated in Step 3. Check if the calculated metering rate is less than the minimum metering rate. If yes, set the calculated metering rate to the minimum metering rate. If the calculated metering rate is higher than the minimum metering rate, check if the calculated metering rate is greater than the maximum metering rate. If yes, set the calculated metering rate to the maximum metering rate. Advance to the time step and repeat. Figure 12.3: ALINEA Algorithm Logic where: \\(LL=\\) low limit (minimum) metering rate, and \\(HL=\\) high limit (maximum) metering rate. For more information, see Papageorgiou, Hadj-Salem, and Blosseville (1991). 12.5 Fuzzy Logic Another method through which ramp metering can be integrated into SwashSim is fuzzy logic. Fuzzy-logic algorithm was developed in response to the limitations of the Seattle bottleneck algorithm (i.e., it addresses the inherent issues with data accuracy and reliability in loop detectors, optimizes the mainline congestion and the ramp queues, does not require extensive system modeling, and is easy to tune using linguistic variables rather than numerical variables). This algorithm uses the mainline speed and occupancy and the ramp occupancy to calculate metering rates. This algorithm has nine rule groups including the upstream speed, upstream occupancy, upstream flow, downstream speed, downstream v/c, ramp demand occupancy, ramp queue occupancy the ramp occupancy, and ramp metering. Each rule group is associated with one or more of the six fuzzy classes including very low (VL), low (L), medium (M), high (H), and very high (VH). Ramp meters are calculated based on the rule weight and the degree of activation of each rule outcome. The location of each of the detectors are the same as the ones shown in ALINEA; however, there are additional detectors located upstream immediately at the end of the ramp. The figure below illustrates the Fuzzy Logic setup used in SwashSim. Figure 12.4: Detector Setup for Fuzzy Logic Algorithm The graphic below is an example of a typical fuzzy logic system. The following is a description of the major components of the fuzzy logic system: Fuzzifier: The fuzzifier translates each input into a set of fuzzy variables via membership functions. Rules: The rules are the set of regulations that are based on expert opinions. Inference: The inference stage involves applying fuzzy operators and implication methods to the rule base, allowing the fuzzy inputs to be converted into one fuzzy output. Defuzzifier: The defuzzifier produces a crisp output based upon the fuzzy output. Figure 12.5: Fuzzy Logic Algorithm Logic Fuzzy Sets The fuzzification process involves translating each input into a fuzzy set with understandable terms such as “low” and “high”. This is done using membership functions, which are different for each input type. Upstream mainline inputs use the Gaussian function, downstream mainline and ramp inputs use the Sigmoid function, and the output uses the triangular function. The full list of inputs along with their specific fuzzy sets and membership functions is shown below. Input Fuzzy Set Membership Function Upstream mainline Occupancy Low Medium High Gaussian Flow Low Medium High Gaussian Speed Low Medium High Gaussian Downstream mainline Speed Very low Sigmoid v/c Very high Sigmoid Ramp Demand Occupancy Very high Sigmoid Queue Occupancy Very high Sigmoid Output Metering rate Low Medium High Triangular 12.5.1 Inputs (Aggregated Performance Measures) Aggregated Upstream Mainline Occupancy Considering the aggregated upstream mainline occupancy varies from 0 to 20% and is described as 3 Gaussian fuzzy sets: Low, medium, and high. The overlap is 50% and the parameters (center point and the sigma value) are found below. Figure 12.6: Fuzzy Logic Upstream Occupancy \\[Guassian(x;c,σ) = e^{-\\frac{1}{2}(\\frac{x-c}{σ})^{2}}\\] Fuzzy Set c (%) \\(\\sigma\\) (%) Low 0 6.4 Medium 10 6.4 High 20 6.4 Aggregated Upstream Mainline Flow Considering the upstream mainline flow varies from 0 to 2,000 veh/h/ln and is described as 3 Gaussian fuzzy sets: Low, medium, and high. The overlap is 50% and the parameters (center point and the sigma value) are found below. Figure 12.7: Fuzzy Logic Upstream Flow \\[Guassian(x;c,σ) = e^{-\\frac{1}{2}(\\frac{x-c}{σ})^{2}}\\] Fuzzy Set c (veh/h/ln) \\(\\sigma\\) (veh/h/ln) Low 0 601 Medium 1000 601 High 2000 601 Aggregated Upstream Mainline Average Speed Considering the aggregated upstream mainline average speed varies from 0 to 100 km/h and is described as 3 Gaussian fuzzy sets: Low, medium, and high. The overlap is 50% and the parameters (center point and the sigma value) are found using the plot shown below. Figure 12.8: Fuzzy Logic Upstream Flow \\[Guassian(x;c,σ) = e^{-\\frac{1}{2}(\\frac{x-c}{σ})^{2}}\\] Fuzzy Set c (km/h) \\(\\sigma\\) (km/h) Low 0 21.5 Medium 50 21.5 High 100 21.5 Aggregated Downstream Mainline Average Speed Aggregated downstream mainline average speed varies from 0 to 110 km/h. It is described as only 1 Sigmoid fuzzy set which is very low, and the parameters (center point and the sigma value) are found using the plot shown below. Figure 12.9: Fuzzy Logic Upstream Flow \\[Sig(x;a,c) = \\frac{1}{1+e^{-a(x-c)}}\\] Fuzzy Set c (km/h) a (km/h) Very Low 65 \\(-0.25\\) Aggregated Downstream Mainline v/c Aggregated Downstream mainline v/c ratio varies from 0 to 1. It is described as only 1 Sigmoid fuzzy set which is very high, and the parameters (center point and the sigma value) are found using the plot shown below. Figure 12.10: Fuzzy Logic Upstream Flow \\[Sig(x;a,c) = \\frac{1}{1+e^{-a(x-c)}}\\] Fuzzy Set c (unitless) a (unitless) Very High 0.5 6.5 Aggregated Ramp Demand/Queue Occupancy Both the aggregated ramp demand and queue occupancy vary from 0 to 50% described as only 1 Sigmoid fuzzy set which is very high, and the parameters (center point and the sigma value) are found using the plot shown below. Figure 12.11: Fuzzy Logic Upstream Flow \\[Sig(x;a,c) = \\frac{1}{1+e^{-a(x-c)}}\\] Fuzzy Set c (%) a (%) Very High 20 4 12.5.2 Inference Fuzzy logic relationship will be defined as a list of if-then pairs between the inputs condition and the outputs responses. The inputs condition is a “premise” and the out responses is a “consequent” (Yu (2009)). For example, as shown in the diagram below, the Rule Condition starts with a If and the Rule Outcome starts with a then. Within the rule condition, there is a AND or OR operation. The AND operation is analogous to the intersection of fuzzy sets, which takes the minimum value of given degree of membership which is between 0-1. The OR operation is analogous to the union of fuzzy sets, which takes the maximum value of given degree of membership which is between 0-1. Rule # Rule Weight Inference Outcome 1 1.5 If upstream mainline occupancy is low Metering rate is high 2 1.5 If upstream mainline occupancy is medium Metering rate is medium 3 2.0 If upstream mainline occupancy is high Metering rate is low 4 2.0 If upstream mainline flow is high AND upstream mainline speed is low Metering rate is low 5 1.0 If upstream mainline occupancy is high AND upstream mainline speed is medium Metering rate is medium 6 1.0 If upstream mainline occupancy is low AND upstream mainline speed is medium Metering rate is high 7 1.0 If upstream mainline flow is low AND upstream mainline speed is high Metering rate is high 8 3.0 If downstream mainline speed is very low AND downstream mainline v/c is very high Metering rate is low 9 3.0 If ramp demand occupancy is very high OR ramp queue occupancy is very high Metering rate is high Rules 1 to Rule 3 The purpose of rule 1 through rule 3 is to form a complete rule base, which means at least one of the rules would work since the whole occupancy range is covered. Rule 4 to Rule 7 The purpose of rule 4 to 7 is to couple speeds with either occupancy or flow to generate metering rates according to the fundamental diagram of traffic flow Rule 8 The purpose of rule 8 is to prevent the formation of downstream congestion. v/c-ratio calculated with the historical measured maximum flow rate of downstream can be seen as a prediction of the downstream bottleneck behavior. Rule 9 The purpose of rule 9 is to prevent the excessive queue formation and to avoid a spillback onto the arterial street road by applying the information collected from queue detector. Rule weights The rule weight is to stress the priority of each rule. Rule weighting scheme is flexible for different applications. 12.5.3 Output (Ramp Metering) The metering rate varies from 240 veh/h to 900 veh/h, and is described as 3 triangular fuzzy sets: Low, medium, and high. The overlap is 50%. Figure 12.12: Fuzzy Logic Upstream Flow Fuzzy Set a (veh/h) b (veh/h) c (veh/h) Low 240 240 570 Medium 240 570 900 High 570 900 900 \\[ Triangle(x;a,b,c)=\\left\\{\\begin{array}{l} 0,&amp; \\mbox{x $\\leq$ a}\\\\ \\frac{x-a}{b-a},&amp; \\mbox{a $\\leq$ x $\\leq$ b}\\\\ \\frac{c-x}{c-b},&amp; \\mbox{b $\\leq$ x $\\leq$ c}\\\\ 0,&amp; \\mbox{x $\\geq$ c} \\end{array}\\right. \\] Defuzzification The defuzzication process is to convert a fuzzy output variable into a crisp value (metering rate). The centroid method is commonly used for the defuzzification process. In practice, a discrete fuzzy centroid equation is used to replace the continuous centroid equation since it is easier to calculate. The equation is shown below. \\[Metering Rate = \\frac{\\sum^3_{i=1}{w_{i}}{c_{i}}{I_{i}}}{\\sum^3_{i=1}{w_{i}}{c_{i}}}\\] where: \\({w_{i}}=\\) weighted output for fuzzy set i, \\({c_{i}}=\\) centroid of fuzzy set i, and \\({I_{i}}=\\) area of fuzzy set i. The indices from the rule outcome refers to the rule # mentioned under inference. \\(w(Low) = RuleOutcome[3] \\times 2 + RuleOutcome[4] \\times 2 + RuleOutcome[8] \\times 3\\), \\(w(Medium) = RuleOutcome[2] \\times 1.5 + RuleOutcome[5] \\times 1\\), \\(w(High) = RuleOutcome[1] \\times 21.5 + RuleOutcome[6] \\times 1 + RuleOutcome[7] \\times 1 + RuleOutcome[9] \\times 3\\), and \\(c(Low) = \\frac{c-b}{3} + a\\) \\(c(Medium) = b\\), \\(c(High) = c - \\frac{b-a}{3}\\), \\(I(Low) = 165\\), \\(I(Medium) = 330\\), and \\(I(High) = 165\\). 12.6 Limitations The program currently is not able to coordinate ramp meters with arterial signals. "],["SimulationControlPanel.html", "13 Running the Simulation 13.1 Single-Scenario Run Settings 13.2 Multi-Scenario Run Settings", " 13 Running the Simulation This part of the user guide will describe the process of running a simulation project. It also describes the possible performance measure outputs from the simulation and viewing an animation of the simulation results. Before a simulation can be started, a valid network must be created and loaded into the simulation engine. More information about network creation is contained in chapters: Custom Network Editor, Freeway Quick Editor, and Two-Lane Highway Quick Editor. To run a simulation of your network, press the “Simulation” button from the top-level toolbar. Figure 13.1: Simulation Control Panel Button This will load the Simulation Control Panel. Figure 13.2: Simulation Control Panel You can choose one of two run types: Single Scenario: This option uses a single set of traffic data outputs. Any number of replications can be made with this option. To run a single-scenario simulation, press the green-colored ‘Run Simulation’ button. Multi-Scenario: This option allows the traffic data inputs to be varied and run with the same network. Each set of unique traffic data inputs corresponds to an individual scenario. Multiple replications can also be run for each scenario. To run a multi-scenario simulation, press the cyan-colored ‘Run Simulation’ button. 13.1 Single-Scenario Run Settings 13.1.1 Warm-up Time This field dictates how long the traffic simulation will run before performance measurement data are collected. Enter a number between 1 and 3600 s. Anything entered above 3600 s will be defaulted back to 3600. This time should be set to a value such that the network will be filled with traffic when it expires. For a small network such as an isolated intersection, a warm-up time of 300 s (5 min) should be sufficient. 13.1.2 Simulation Duration This field dictates how long the traffic simulation will run after the warm-up time. Enter a number between 1 and 7200 s. Any entered value above 7200 s will be defaulted back to 7200. Performance Measures are collected during this time. 13.1.3 Random Number Seeds The random number seeds affect the various items within the simulation program that rely on random numbers. More specifically: 1st Random Number Seed – Applies to vehicle entry generation 2nd Random Number Seed – Applies to vehicle type generation 3rd Random Number Seed – Applies to driver type generation 4th Random Number Seed – Applies to all other randomly generated inputs For the same inputs, the results for a simulation run will be at least slightly different from a previous simulation run if any of the random number seeds were different for the respective runs. The seed numbers can be entered manually (any integer value), or they can be automatically created by pressing the “Auto Generate” button. If you desire to recreate the results exactly of a previous simulation run, use the same random number seeds. Note: When a simulation is run, a “RandSeedNumbers” text file is written to the project output folder. This file will include the random seeds and the date/time of the simulation run. If the file already exists in the folder, these values will be appended to the bottom of the existing entries in the file. When saving a project, the current random seed values will be saved in the project file (discussed later in this guide). 13.1.4 Number of Replications The number of times to repeat a simulation run. If the specified number of replications is more than one, the random number seed will be set randomly for each one run. The seed values will be written to the file ‘RandSeedNums.txt’ in the project output folder. 13.1.5 Output Options The ‘Output Options’ dialog allows you to select the various data items you would like generated from the simulation and saved to files. These output options are described in Simulation Output Data. Figure 13.3: Simulation Output Options 13.2 Multi-Scenario Run Settings Figure 13.4: Multirun Settings Begin by pressing the ‘New Multi-Scenario Settings’ button. Next, press the ‘+ Add Scenario’ button to add a new scenario. Repeat this as necessary for the total number of scenarios desired. Settings for each scenario are as follows. Include in Simulation: If this box in checked, the corresponding scenario settings will be included in the simulation runs. # of Replications: This setting is the same as for the single-scenario option. Warm-up Time: This setting is the same as for the single-scenario option. Sim Duration: This is the amount of time the simulation will run beyond the end of the warm-up time. Performance measure statistics are collected during this time. Random # Seeds: Pressing the ‘Set’ button will load the following input screen. The number of rows in this form will correspond to the number of replications specified. To run a scenario replication with random number seed values, use ‘0’ in the four cells to the right. Pressing the ‘Generate’ button in the second column (‘Use Random Values’) will place zeros in these cells. To use specific random number seed values, but have them generated randomly by the program, press the ‘Generate’ button in the third column (‘Generate Values’). You can also directly enter any specific values desired into these cells. The values need to be positive integers in the range of 0-65535. Figure 13.5: Multirun Random Number Seed Values Traffic Data: Pressing the ‘Set’ button will load the ‘Entry Link Inputs’ input dialog. It is similar to the traffic dialog described in the Custom Network Traffic Data section. The multi-scenario version differs in that provides a drop-down list at the top to choose each entry node in the network. Figure 13.6: Multirun Random Number Seed Values Output Options: The output options are are the same as for the single-scenario option. If you want to use the same output options for each scenario, set the output options as desired for the first scenario and then check the box ‘Use first scenario output options for all scenarios’. Once all simulation parameters are input, press the cyan-colored ‘Run Simulation’ button. All multi-run scenarios that are checked in the ‘Include in Simulation’ column will be executed. A run progress dialog will be displayed for the duration of all simulation runs. Include Signal Data: If this box is checked, you can select a signal timing data file for the scenario. Thus, a different file (i.e., different signal timing plans) can be specified for each scenario. The multi-scenario run settings can be saved to a separate file. If the project is saved after saving these settings to a file, the muti-scenario settings file will be linked to the project file. "],["ChapterRouteAssignment.html", "14 Route Assignment 14.1 Introduction 14.2 Link Performance Function 14.3 User Equilibrium Route Assignment 14.4 XXE 14.5 User Equilibrium Path Flow", " 14 Route Assignment 14.1 Introduction By default, the method SwashSim uses to move vehicles from an entry link to an exit link is based on user-specified turning percentages. That is, when a vehicle exits a link, it gets randomly assigned a turning movement for the next link based on user-specified turning percentages for the link (e.g., 25% left, 55% through, 20% right). For this method, it is not possible to explicitly assign specific percentages of vehicles to travel between a given origin-destination pair. Alternatively, a route assignment method can be implemented. The route assignment method uses an origin-destination (O-D) demand matrix with the user equilibrium (UE) traffic assignment method to specify the full route through the network each simulated vehicle will take. 14.2 Link Performance Function Route assignment concerns the selection of routes (or paths) between origins and destinations in transportation networks. Since the selection of routes is often based on the link travel time, it is essential to describe the relationship between link travel time and link flow. Link performance functions are often used for this purpose, such as the Bureau of Public Roads (BPR) function shown below (Public Roads (1964)). Figure 14.1: BPR Function Example \\[t_\\alpha = t_\\alpha^0(1 + 0.15(\\frac{v_\\alpha}{c_\\alpha})^{4})\\] \\(t_\\alpha\\) is the average travel time of link \\(\\alpha\\) \\(t_\\alpha^0\\) is the free-flow travel time of link \\(\\alpha\\) \\(v_\\alpha\\) is the traffic volume of link \\(\\alpha\\) \\(c_\\alpha\\) is the capacity of link \\(\\alpha\\) 14.3 User Equilibrium Route Assignment UE assignment is the most commonly used route assignment. Wardrop (1952) proposed the concept of UE under the assumption that users in a traffic network tend to minimize their travel times, and UE is achieved when no user can reduce his/her travel time by changing routes. Based on the use of non-decreasing, continuous and differentiable link performance functions, Beckmann, Mcguire, and Winsten (1957) proposed the mathematical programming formulation for UE traffic assignment, which formulated the problem as a convex problem with a convex objective function under linear constraints. Dafermos and Sparrow (1969) applied the Frank-Wolfe algorithm (Frank and Wolfe (1956)) to solve this convex problem. The Frank-Wolfe algorithm applies an iterative process that involves performing all-or-nothing assignment, updating link volumes, finding optimal direction, updating link volumes, and checking link volume convergence. The terminating condition of the iterative loop process is the convergence of link volumes. Note that the all-or-nothing assignment is basically to find the shortest path (path with the shortest travel time) between each OD pair, and assign all the demand of the OD pair to that shortest path. Below shows the Frank-Wolfe process’ steps and formulas. Step 0. Initialization. Perform all-or-nothing assignment based on \\(t_a = t_a(0), \\forall a\\). This yields \\(x^1\\). Set counter \\(n:=1\\) Step 1. Update. Set \\(t_a^n=t_a(x_a^n),∀a.\\) Step 2. Direct finding. Perform all-or-nothing assignment based on \\(t_a^n,\\forall a\\). This yields (direction) flows yn Step 3. Line Search. Find \\(\\alpha_n\\) that solves \\[min_{0\\le\\alpha_n\\le1} \\sum_\\alpha \\int_0^{x_a^n+\\alpha_n(y_a^n - x_a^n)} t_a (\\omega)d\\omega\\] Step 4. Move. Set \\(x^{n+1}=x^n+\\alpha_n(y^n-x^n)\\) Step 5. Convergence test. If \\(\\frac{\\sqrt{\\sum_\\alpha(x_a^{n+1} - x_a^n)^2}}{\\sum_\\alpha x_a^n} &lt; \\epsilon\\), stop; otherwise \\(n:=n+1\\), and go to Step 1. 14.4 XXE Figure 14.2: BPR Function Example XXE is a traffic assignment program based on the standard user equilibrium principle, which is defined as: “The travel time between a specified origin and destination on all used routes is the same and is less than or equal to the travel time that would be experienced by a traveler on any unused route.” With a defined network and a given origin-destination matrix, XXE assigns traffic flows by setting up the user equilibrium problem as a mathematical program as shown in Equation 8.8 in Mannering and Washburn (2019). (https://github.com/swash17/XXE) XXE is a program developed by Scott Washburn and Fred Mannering in 2007. The XXE program implements the Frank-Wolfe approach to solve the UE traffic assignment. The route assignment method calls the XXE program to perform the UE traffic assignment. [https://github.com/swash17/XXE] 14.5 User Equilibrium Path Flow In order to assign routes to simulated vehicles, the path flow under UE condition is needed. However, while the UE link volumes are unique for a specific network and OD demand matrix, path volumes are not unique in most cases. This project obtains one set of feasible path flow solution as the side product of the Frank-Wolfe approach. During the Frank-Wolfe approach, the path volumes are saved and updated the same way as the link volumes. The XXE program is modified to save and update the path flow during the Frank-Wolfe approach, and output one set of feasible path flow under UE condition. As the feasible path flow needs to satisfy two constraints: link volume equals to the sum of all the path volumes that use that link; OD volume equals to the sum of all the path volumes that are associated with that OD. The following tables show the UE results output from the modified XXE program on a network with four OD pairs, the two tables show that the path flow from XXE satisfy the two constraints. Link Constraints Link Volumes Path Volumes Difference 9, 10 982.808761 982.81 -0.0012 9, 11 1071.47666 1071.48 -0.0033 10, 9 1099.11443 1099.12 -0.0056 10, 12 813.523343 813.52 0.00334 11, 9 690.170992 690.17 0.00099 11, 12 972.191239 972.19 0.00124 12, 10 874.829008 874.83 -0.001 12, 11 1100.88557 1100.88 0.00557 OD Constraints OD Demand Path Volumes Difference 12 750 750.000 0.000 13 500 500.000 0.000 14 640 640.000 0.000 21 700 700.000 0.000 23 495 495.000 0.000 24 250 250.000 0.000 31 350 350.000 0.000 32 240 240.000 0.000 34 325 325.000 0.000 41 575 575.000 0.000 42 400 400.000 0.000 43 430 430.000 0.000 "],["SimOutputData.html", "15 Simulation Output Data 15.1 Vehicle Headway Data 15.2 Link Performance Measure Data 15.3 Detector Vehicle Actuation Data 15.4 Detector Aggregate Measures Data 15.5 Vehicle Time Step Data 15.6 Signal Time Step Data 15.7 Ramp Metering Data 15.8 Lane Change Data 15.9 Platoon Data 15.10 Emissions and Fuel Consumption Data", " 15 Simulation Output Data Multiple types of data/performance measures can be selected for output, as selected from the simulation control panel. These files get written to the output data folder selected in the project properties dialog. The various performance measures included in these output files are described in the Performance Measures section. 15.1 Vehicle Headway Data This file contains the headway value for each vehicle generated into the network, from each entry node. It is in a comma-separated value (CSV) format. The CSV file is named “HeadwayDataOutput.csv”. This file will contain the following information: Node ID: ID of entry node where vehicle entry headway was generated. Vehicle ID: ID of vehicle to which generated entry headway applies. Original Headway Value (s): See Vehicle Generation for more information. Revised Headway Value (s): If a very small headway value is generated, the program checks that the vehicle entering with this headway will not potentially collide with the preceding vehicle that entered, if on the same lane. This can happen if the entry speed (based on desired speed) of the subject vehicle is greater than the speed of the preceding vehicle. If a collision is possible, the program adjusts the generated headway value to avoid a collision. Link to details about this process forthcoming. 15.2 Link Performance Measure Data This file contains link-level performance measures. It is important to note that detector actuations that occur during the warm-up time are not included in the results reported in this file. It is in a comma-separated value (CSV) format and named “LinkResults.csv”. The file contains the following information: Scenario: Corresponds to scenarios in a multi-run setup. If a single simulation run is made, this number will always be ‘1’. SubScenario: Corresponds to scenarios in a multi-run setup. If a single simulation run is made, this number will always be ‘0’. Replication: The replication number of a single run or the scenario from a multi-run setup. Link ID: ID of link containing subject detector. Link Type: Entry, Exit, Connector, further classified as Freeway, Two-Lane Highway, or Arterial. Density (veh/mi/ln): See Performance Measures for more information. Avg. Speed (mi/h): See Performance Measures for more information. Avg. Travel Time (s): See Performance Measures for more information. Accel Noise-Mean Zero (ft/s/s): See Performance Measures for more information. Accel Noise-Mean NonZero (ft/s/s): See Performance Measures for more information. Flow Rate (veh/h/ln): See Performance Measures for more information. Num. Passenger Cars: Count of passenger-style vehicles that entered and exited the link. Vehicles that entered the link during the warm-up time or were still on the link when the simulation ended are not counted. The same applies for the following vehicle types. Percentage of Passenger Cars: Percentage of all vehicles that passed through the subject link that were passenger-style vehicles. Num. SUT (Single Unit Truck): Count of SUT vehicles that entered and exited the link. Percentage of SUT: Percentage of all vehicles that passed through the subject link that were SUT vehicles. Num. IMST (Intermediate Semi-Trailer): Count of IMST vehicles that entered and exited the link. Percentage of IMST: Percentage of all vehicles that passed through the subject link that were IMST vehicles. Num. ISST (Interstate Semi-Trailer): Count of ISST vehicles that entered and exited the link. Percentage of ISST: Percentage of all vehicles that passed through the subject link that were ISST vehicles. Num. DST (Double Trailer Semi-Trailer): Count of DST vehicles that entered and exited the link. Percentage of DST: Percentage of all vehicles that passed through the subject link that were DST vehicles. Total Num. Vehicles: Count of all vehicles that entered and exited the link. This value should match the sum of the counts of passenger, SUT, IMST, ISST, and DST vehicles. Veh. Hours traveled (veh-h): See Performance Measures for more information. Veh. Miles traveled (veh-mi): See Performance Measures for more information. Delay Left Turn Vehicles (veh-s): See Performance Measures for more information. Delay Through Vehicles (veh-s): See Performance Measures for more information. Delay Right Turn Vehicles (veh-s): See Performance Measures for more information. Volume Left Turns (veh): Count of vehicles that made a left turn from the subject link. Volume Through (veh): Count of vehicles that made a through movement from the subject link. Volume Right Turns (veh): Count of vehicles that made a right turn from the subject link. Total Stops: See Performance Measures for more information. 15.3 Detector Vehicle Actuation Data This file contains the details of each actuation for a given detector during the simulation. One comma-separated value (CSV) file will be created for each detector. Each CSV file will be named as follows: “Link_i_Lane_j_Detector_k_Detector Label_x_z.csv” where: i corresponds to the Link ID of the link containing the detector, j corresponds to the Lane ID of the lane containing the detector, k corresponds to the Detector ID, Detector Label is the text string entered in the detector label field in the detector setup dialog, x corresponds to the scenario number, and z corresponds to the replication number. The (CSV) file will contain the following information. The following values are fixed for each file; thus, they are printed just once at the top of the file. Link ID: ID of link containing subject detector. Lane ID: ID of lane within link containing subject detector. Detector ID: ID of subject detector. These values are unique to each link and lane. That is, the first detector placed in each lane of a given link will have ID=1. Detector Label: Text string entered by user. Travel Direction: Text string entered by user. The following values are unique to each vehicle actuation; thus, they will change from one row (record) to the next. Vehicle ID: ID of vehicle that crossed detector. Actuation Time On (s): Simulation time when front of vehicle passes detector’s upstream edge. Actuation Time Off (s): Simulation time when rear of vehicle passes detector’s downstream edge. A value of ‘-1’ indicates either 1) that the vehicle changed lanes after actuating the detector but before passing completely over the detector or 2) that the vehicle was still on the detector when the simulation ended. Vehicle Type Id: The number corresponding to the specific vehicle model. This value can be found in the Vehicles Base Info section of the Settings screen. For example, the 2006 Honda Civic Si is ID 1. Vehicle Length (ft): The length of the given vehicle model. Speed (mi/h): The instantaneous speed of the vehicle at time of detector actuation on. Gap (ft): The distance between the current vehicle passing over the leading edge of the detector to the immediately in front of this vehicle. The gap distance is measured from the front end of the trail vehicle (i.e., at the detector) to the rear end of the leader vehicle. A value of ‘-1’ indicates that there was no leader vehicle for the subject vehicle. Headway (s): The elapsed time between when the current vehicle passed over the leading edge of the detector and when the previous vehicle (i.e., leader vehicle) passed over the detector. The headway value is thus measured relative to the front end of each vehicle. A value of ‘0’ indicates that there was no leader vehicle for the subject vehicle. Queue Status: The queuing state of the vehicle when it passed over the detector. The possible queuing states are listed [Vehicle_Movement_Logic#Queue_Status|here]. Downstream Turn Dir: The assigned turning movement for the subject vehicle at the end of the link of which the subject detector is located. Note that all detector actuations, during and after the warm-up time, are included in the results reported in this file. 15.4 Detector Aggregate Measures Data This file contains aggregated detector measured values–that is, an aggregation of the results contained in the individual detector actuation files (described above). It is important to note that detector actuations that occur during the warm-up time are NOT included in the results reported in this file. The results for all detectors will be contained in a single file. The file is in a comma-separated value (CSV) format. The file will be named as follows: “DetectorAggregateMeasures_ProjectName.csv” where ProjectName will correspond to the name of your currently loaded project file (i.e., the *.ssim file). This file will contain the following information Scenario: Corresponds to scenarios in a multi-run setup. If a single simulation run is made, this number will always be ‘1’. SubScenario: Corresponds to scenarios in a multi-run setup. If a single simulation run is made, this number will always be ‘0’. Replication: The replication number of a single run or the scenario from a multi-run setup. Link ID: ID of link containing subject detector. Lane ID: ID of lane within link containing subject detector. Detector ID: ID of subject detector. These values are unique to each link and lane. That is, the first detector placed in each lane of a given link will have ID=1. Detector Type: Detectors can be attached to signalized intersection controllers, ramp metering controllers, or unassigned (perform the basic measurement functions) Detector Label: Text string entered by user. Veh. Count Total: Total number of vehicles that crossed the detector during the simulation period. Flow rate (veh/h): The vehicle count total divided by the simulation period (in hours). For example, if the simulation period was 30 minutes, the flow rate values will double the vehicle count total values. Also see Performance Measures for more information. Avg. Speed (mi/h): See Performance Measures for more information. Avg. Speed (ft/s): The above measure converted from units of mi/h to ft/s. Std. Dev. of Speed (ft/s): The standard deviation of all measured speeds during the simulation period. Avg. Headway (s): The arithmetic average of all measured headways during the simulation period. Percent Followers: See Performance Measures for more information. Follower Density: See Performance Measures for more information. Occupancy (%): The percentage of time in which the detector was activated (i.e., a vehicle present on the detector) relative to the simulation period. See Performance Measures for more information. % Time Int Q Override Active: Specific to ramp metering applications. Details forthcoming. % Time Adv Q Override Active: Specific to ramp metering applications. Details forthcoming. Veh. Type 1-n Totals: Count of vehicles of the specified vehicle model that crossed the detector. 15.5 Vehicle Time Step Data This file, referred to as the vehicle TSD file, is in a comma-separated value (CSV) format and contains detailed vehicle data, for every simulation time step. These values can also be viewed in the animation when individual vehicle properties are displayed. The file is named “TSD_x_y_z”, where x corresponds to the scenario number, y corresponds to the sub-scenario number, and z corresponds to the replication number. The file provides detailed time-step vehicle properties. The basic structure of the file is as follows: Each row represents a single vehicle record for a single simulation time step (0.1 s). The records are in sequence of vehicle ID. That is, all records for vehicle ID 1 are presented first in the file, followed by all records for vehicle ID 2, and so on. The number of records for a given vehicle ID correspond to the number of time steps for which the vehicle was present on the network, minus the records for the timesteps during which the vehicle was on an entry link and exit link. Thus, the timestep for the first record for a vehicle ID will be larger than system entry time (column 27) and the timestep for the last record for a vehicle ID will be less than the system exit time (column 28). Keep in mind that this file can get extremely large if many network links are selected for output, so it is generally recommended to output only the links for which you need to do a close examination of the vehicle properties and/or want to do some post-processing of the data. The TSD file contains the following information (with units, as appropriate, in parentheses), in order from left to right as the fields are presented in the file: SimTime (s): Simulation time, referenced to start of the simulation–that is, the start of the warm-up time. Veh Index: The ID assigned to the vehicle. These numbers are unique and assigned in order that vehicles enter the system. Fleet Type: See Vehicles for more information. Veh Label: See Vehicles for more information. Veh Length (ft): See Vehicles for more information. Veh Width (ft): See Vehicles for more information. Driver Type: See Drivers for more information. Link ID: The ID of the link that the subject vehicle is currently traveling on. Target Link ID: The ID of the next link that the subject vehicle is destined for. Lane ID: The ID of the lane that the subject vehicle is currently traveling on. Target Lane ID: The ID of the lane that the subject vehicle will attempt to move to in the next time step. Lane Change Status: See Lane Changing for more information. Passing Status: See Two-Lane Highway Passing for more information. Leader ID: The ID of the vehicle immediately preceding the subject vehicle in the same lane. Follow ID: The ID of the vehicle immediately behind the subject vehicle in the same lane. Platoon Position: A vehicle is considered to be either a follower or leader. See Leader/Follower Status for more information. Acceleration Mode: See Acceleration Mode for more information. Acceleration (ft/s/s): Rate of acceleration of subject vehicle at the given time step. Desired Acceleration (ft/s/s): See Acceleration Mode for more information. Velocity (ft/s): Speed of subject vehicle at the given time step. Desired Speed (ft/s): See Desired Speed for more information. PositionX (ft): The distance in the x (horizontal) direction, relative to the entry node coordinate where the subject vehicle entered the system, where subject vehicle is currently located. PositionY (ft): The distance in the y (vertical) direction, relative to the entry node coordinate where the subject vehicle entered the system, where subject vehicle is currently located. Angle (deg): See Network Structure for more information. Link Position (ft): The current position of the subject vehicle on a link, relative to the upstream end of the link. This distance is measured to the front end of the vehicle. This distance ranges from 0 to the length of the link. Distance To Lead Vehicle (ft): The distance between the front end of the subject vehicle to the back end of a leader vehicle. A value of ‘-1’ indicates that there is no leader vehicle for the subject vehicle at this time step. System Entry Time (s): Simulation time at which the subject vehicle entered the system (i.e., entered the upstream end of an entry link). System Exit Time (s): Simulation time at which the subject vehicle exited the system (i.e., exited the downstream end of an exit link). Cold Start: See Emissions and Fuel Consumption for more information. Vehicle Specific Power (VSP): See Emissions and Fuel Consumption for more information. Nitrogen Oxide (NOx): See Emissions and Fuel Consumption for more information. HydroCarbons (HC): See Emissions and Fuel Consumption for more information. Carbon Monoxide (CO): See Emissions and Fuel Consumption for more information. Fuel Use: See Emissions and Fuel Consumption for more information. Manifold Pressure: See Emissions and Fuel Consumption for more information. Mass Air Flow: See Emissions and Fuel Consumption for more information. Engine Load: See Emissions and Fuel Consumption for more information. Gear: See Maximum Acceleration for more information. Gear Ratio: See Maximum Acceleration for more information. RPM (revs/min): See Maximum Acceleration for more information. Torque (ft-lb): See Maximum Acceleration for more information. Power (ft-lb/s): See Maximum Acceleration for more information. Latitude: Currently not enabled. Longitude: Currently not enabled. Lane ID Right: ID of the lane immediately to the right of the lane that subject vehicle is currently traveling in. A value of zero means subject vehicle is currently in the right-most lane. Lane ID Left: ID of the lane immediately to the left of the lane that subject vehicle is currently traveling in. A value of zero means subject vehicle is currently in the left-most lane. Queue Status: A vehicle can be in one of four different states of queuing at each time step: NotInQueue, SlowingForQueue, StoppedInQueue, MovingInQueue, and QueueDischarge. The definitions of these states are based upon the guidance in the HCM 2016 [Chapter 36 (Concepts: Supplemental), page 42]. 15.6 Signal Time Step Data Generates a CSV file named “TSD_signal.csv” upon running a simulation. The file provides the signal phase status for every simulation time step, for every signal in the network, to a comma-separated value (CSV) file. The (CSV) file will contain the following information Signal ID Simulation Time Phase Number Status Interval Time Remain 15.7 Ramp Metering Data Outputs details of the ramp metering controller and its associated control detectors. One comma-separated value (CSV) file will be created for each ramp metering controller. Each CSV file will be named as follows: “RampMeteringIntervalData_ControllerId_k_x_y_z.csv” where: k corresponds to the ramp controller ID, x corresponds to the scenario number, y corresponds to the subscenario number, and z corresponds to the replication number. The (CSV) file will contain the following information: Time(s): This will be in 30-s increments, which is the ramp metering rate calculation update interval Ramp Controller ID: These values correspond to ID value in signal timing data file Controller Phase ID: The number of phase ID’s will correspond to the number of lanes served Metering Rate (veh/h): Calculated metering rate. If more than one lane is controlled by meter (which means there will be more than one phase ID), the metering rate is divided by the number of lanes. For example, if the metering rate is set of a minimum value of 240 veh/h, and meter serves two lanes, the metering rate per phase will be set to 120 veh/h. The proportional split of the overall metering rate between the phases can be changed by the user, but by default, is split evenly across the number of lanes (e.g., 0.5 for two metered lanes). There will only be one instance of the above four column headings. The following column headings will repeat for each detector associated with the given ramp controller phase ID, as follows. Det Link ID: Link on which detector is present Det Lane ID: Lane on which detector is present Det ID: ID number for detector Det Function: This will be either… RampMeterPresence: Detector immediately upstream of ramp meter stop bar RampMeterQueueIntermediate: Detector placed approximately 500 ft upstream of ramp meter stop bar RampMeterQueueAdvance: Detector placed near the arterial/on-ramp junction Det Occ Interval(%): Det Occ Cumulative(%): A “RampMeteringSummaryData.csv” file is also output. This file provides the percentage of time, over the simulation period, that the metering rate was set to one of three values (base, intermediate queue, advance queue). 15.8 Lane Change Data Outputs details of the lane change maneuvers, to a comma-separated value (CSV) file. The basic structure of the file is as follows: Each row represents a single vehicle record for a single simulation time step (0.1 s). The records are in sequence of vehicle ID. That is, all records for vehicle ID 1 are presented first in the file, followed by all records for vehicle ID 2, and so on. The number of records for a given vehicle ID correspond to the number of time steps for which the vehicle was present on the network, minus the records for the timesteps during which the vehicle was on an entry link and exit link. Thus, the timestep for the first record for a vehicle ID will be larger than system entry time (column 27) and the timestep for the last record for a vehicle ID will be less than the system exit time (column 28). The (CSV) file will contain the following information Vehicle ID Time Index Link ID Lane Change Motivation Future Passing Mode Desired Lane ID Subject Vehicle Makes a lane change? Subject Vehicle Link Position Subject Vehicle Velocity Subject Vehicle Acceleration Subject Vehicle Urgency Factor Subject Vehicle Acceptable Risk ID of Lead Vehicle on Desired Lane ID of Following Vehicle on Desired Lane Velocity of Lead Vehicle on Desired Lane Velocity of Following Vehicle on Desired Lane Distance between Subject Vehicle and Lead Vehicle on Desired Lane Distance between Following Vehicle on Desired Lane and Subject Vehicle Actual Risk of Subject Vehicle with Respect to Lead Vehicle on Desired Lane Actual Risk of Follow Vehicle on Desired Lane with Respect to Subject Vehicle Subject Vehicle Is Able to Avoid Collision with Lead Vehicle on Desired Lane? Follow Vehicle on Desired Lane Is Able to Avoid Collision with Subject Vehicle? Lead Gap Is Acceptable? Lag Gap Is Acceptable? 15.9 Platoon Data Outputs vehicle platoon measurements, to a comma-separated value (CSV) file. 15.10 Emissions and Fuel Consumption Data The simulation will calculate detailed vehicle emissions and fuel consumption data, for every simulation time step. These values can be viewed in the animation, as well as the vehicle time step data output file (if selected for output). "],["ChapterPerformanceMeasures.html", "16 Performance Measures 16.1 Flow Rate 16.2 Average Speed 16.3 Density 16.4 Percent Followers 16.5 Follower Density 16.6 Acceleration Noise 16.7 Travel Time 16.8 Running Time 16.9 Delay 16.10 Queue Length 16.11 Saturation Flow Rate 16.12 Stop Rate 16.13 Vehicle-Miles-Traveled (VMT) 16.14 Vehicle-Hours-Traveled (VHT) 16.15 Vehicle-Hours-Delayed (VHD)", " 16 Performance Measures Performance measure statistics are only calculated for the simulation duration time, not during the warm-up time. Therefore, the warm-up time should be sufficient to fill the network with vehicles so that performance measure calculations do not include simulation time when parts of the network are empty. Performance measures are calculated on either a point (detector) basis or a link basis. Whereas all vehicles that cross a detector within the simulation duration time are factored into the performance measure(s) calculation, for link-based measures, only vehicles that both enter and exit a link within the simulation duration time are considered. Thus, in addition to any difference due to point- versus space-based measures, the sets of vehicles included in the respective calculations will typically not be the same. For example, for a detector placed near the end of a long link, some vehicles may enter the link during the warm-up time and cross the detector during the simulation duration time. These vehicles would not be factored into the link performance calculation because they only exited, not both entered and exited, the link during the simulation duration time. 16.1 Flow Rate Point (detector) measurement \\(q_p=\\frac{n_p}{t}\\) where: \\(q_p\\) = traffic flow at a point in vehicles per unit time, \\(n_p\\) = number of vehicles passing a designated roadway point during time t, and \\(t\\) = duration of time interval. Link measurement \\(q_d=\\frac{n_d}{t}\\) where: \\(q_d\\) = traffic flow over a specific distance in vehicles per unit time, \\(n_d\\) = number of vehicles traversing a specific distance during during time t, and other terms as defined previously. 16.2 Average Speed Time-mean (Spot) Speed (Detector Measure) \\(\\bar{u}_t=\\frac{1}{n_p} \\sum_{i=1}^{n_p}\\ u_{i}\\) where: \\(\\bar{u}_t\\) = time-mean speed in unit distance per unit time, typically mi/h, \\(u_{i}\\) = point speed measurement for vehicle i, and other terms as previously defined. Space-Mean Speed (Link Measure) \\(\\bar{u}_s=\\frac{1}{\\frac{1}{n_d}\\sum_{i=1}^{n_d}\\ \\frac{1}{l/t_i}}\\) where: \\(\\bar{u}_s\\) = space-mean speed in unit distance per unit time, typically mi/h, \\(l\\) = length of roadway used over which measurements are made in unit distance, typically miles, \\(t_i\\) = travel time for vehicle i over distance l in unit time, typically hours, and other terms as previously defined. 16.3 Density Density Calculation (Detector Measure) Detector occupancy can be used to approximate density as follows. \\(PropOccupancy =\\frac{T_o}{T}\\) where: \\(PropOccupancy\\) = proportion of time that a vehicle occupies the location of the point detector, \\(T_o\\) = total time the point detector is occupied by a vehicle, and \\(T\\) = total observation time. Relationship between Occupancy and Density \\(k_{est}=PropOccupancy \\times \\frac{5280}{L_e}\\) where: \\(k_{est}\\) = estimated density, in units of veh/mi, \\(L_e\\) = effective vehicle length (average vehicle length + detector length), in units of feet, and \\(5280=\\) feet per mile. Density Calculation (Link Measure) \\(k=\\frac{q_d}{\\bar{u}_s}\\) where: \\(k\\) = density in units of vehicles per unit distance, typically veh/mi/ln, and other terms as defined previously. 16.4 Percent Followers Percent Followers (Detector Measure) Percent Followers is the percent of vehicles designated as followers within simulation \\(PF=\\frac{n_{follow}}{n_p} \\times 100\\) where: \\(PF\\) = percent followers at a designated roadway point during the measurement time period, and \\(n_{follow}\\) = the number of follower vehicles passing a designated roadway point with a headway \\(\\le\\) 2.5 seconds (see Washburn et al. (2018)). 16.5 Follower Density Follower Density (Detector Measure) Follower Density is the density times the proportion of followers \\(FD=\\frac{PF}{100} \\times \\frac{q_p}{\\bar{u}_t}\\) where: \\(FD\\) = follower density at a designated roadway point during the measurement time period, in units of followers/mi/ln, and other terms as defined previously. 16.6 Acceleration Noise Acceleration Noise measures the standard deviation associated with successive deceleration and acceleration in an uninterrupted-flow environment. It provides an indication of the smoothness of traffic flow. \\(\\sigma=\\left\\{ \\left(\\frac{1}{T}\\right)\\int_{0}^T\\ [a(t)]^{2}dt \\right\\} ^{1/2}\\), Assuming mean (\\(\\mu\\))=0 \\(\\sigma=\\left\\{ \\left(\\frac{1}{T}\\right)\\sum_{i=0}^T\\ [a(t)]^{2}Δt\\right\\}^{1/2}\\), (In simulation) \\(\\sigma=\\left\\{ \\left(\\frac{1}{T}\\right)\\int_{0}^T\\ [a(t)-\\mu]^{2}dt\\right\\}^{1/2}\\), Assuming mean (\\(\\mu\\)) \\(\\neq0\\) where: \\(\\sigma=\\) standard deviation, \\(a(t)=\\)acceleration value at time t, \\(\\mu=\\) mean, and \\(T=\\) total time in motion for the trip segment. 16.7 Travel Time Detector or link measurement The travel time of a vehicle is the total time of movement between two points, including any time of delay that may have occurred from traffic lights, stop signs, etc. to reach a destination. \\(\\bar{t}=\\frac{1}{n_d}\\sum_{i=1}^{n_d}\\ t_{i}\\) where: \\(\\bar{t}=\\) average travel time (units of time), and other terms as previously defined. 16.8 Running Time The running time of a vehicle is the time spent in motion as it travels between specific stations on a given traffic network. Running time will not include any delays that vehicle may encounter from traffic control devices such as stop signs, signals, etc. In order to determine the running time of a given network, the travel time of vehicles that were not included in a traffic-controlled queue anywhere along the length of the roadway are used. 16.9 Delay Individual Vehicle Delay (Link Measure) \\(Delay_{ij} = Link Travel Time_{ij} – \\frac{LinkLength_{j}}{Desired Speed_{i}}\\) where: \\(Delay_{ij}=\\) difference between actual travel time and travel time at desired speed for vehicle i on link j (s) \\(LinkLength_{j}=\\) length of link j (ft) \\(Desired Speed_{i}=\\) Desired Speed for vehicle i in subject link (ft/s) \\(Link Travel Time_{ij} = Link Exit Time_{ij} - Link Entrance Time_{ij} =\\) time for vehicle i to travel the length of link j (s) where: \\(Link Entrance Time =\\) time when vehicle i entered link j (s), and \\(Link Exit Time =\\) time when vehicle i exited link j (s). Total Vehicle Delay (Link Measure) \\(TotalDelay_{j}=\\sum_{i=1}^N\\ Delay_{ij}\\) where: \\(Total Delay_{j}=\\) summation of individual vehicle delays, for vehicles \\(1-N\\), that traveled full length of link j (veh-s) Average Vehicle Delay (Link Measure) \\(AverageDelay_{j}=\\frac{TotalDelay_{j}}{TotalVehicles_{j}}\\) where: \\(AverageDelay_{j}=\\) the average delay experienced by all vehicles traversing link j during the simulation period (i.e., after warm-up time) (s/veh), and \\(TotalVehicles_{j}=\\) the number of vehicles traversing the full length of link j during the simulation period (i.e., after warm-up time) (veh) Note about Control Delay: Control delay is the portion of the total delay attributed to the influence of a traffic control (signal, stop/yield sign). Care must be taken when selecting the links from which to extract delay to use for control delay purposes, as control delay consists of deceleration delay and acceleration delay, in addition to stop delay. 16.10 Queue Length Queue Length (Link Measure) \\(Avg. Queue Length_{j} = \\frac{Total Delay_{j}}{Simulation Duration}\\) where: \\(Avg. Queue Length_{j}=\\) average queue length for link j (veh), \\(Total Delay_{j}=\\) total delay of vehicles on link j (veh-s), and \\(Simulation Duration=\\) simulation duration (not including warmup time) (s). 16.11 Saturation Flow Rate Saturation Flow Rate (Detector Measure) \\(h_{sat}=\\frac{T_{i}-T_{4}}{i-4}\\) \\(SLT=T_{4} - 4h_{sat}\\) \\(s=\\frac{3600}{h_{sat}}\\) where: \\(SLT=\\) start up lost time, \\(T_{i}=\\) the time it takes for the front axle of vehicle i in the queue to cross the stop bar post green signal indication on the intersection, i ranges from 6–10 vehicles, depending upon the observed queue length, \\(s=\\) saturation flow rate (veh/h), \\(h_{sat}=\\) saturation headway (s/veh), and \\(3600=\\) number of seconds per hour 16.12 Stop Rate Stop Rate is the average number of stops per hour. (Link Measure) \\(Stop Rate \\text{(stops/h)} = \\frac{Total Stops}{Simulation Duration \\text{ (h)}}\\) where: \\(Stop Rate_{j}=\\) the average number of stops per hour on link j \\(Total Stops_{j}=\\) the total number of vehicle stops on link j, and \\(Simulation Duration=\\) simulation duration (not including warmup time) (s) Notes about Total Stops measure: If a vehicle stops one or more times on the link, it only gets counted as one stop. In the case of cycle failures, this number will likely not reflect the actual number of stops. To be counted as a stop, SwashSim only considers the ‘StoppedInQueue’ status, not ‘SlowingInQueue’ or ‘QueueDischarge’. 16.13 Vehicle-Miles-Traveled (VMT) \\(VMT=n_d \\times l\\) where: \\(VMT\\) = vehicle-miles of travel, in units of veh-mi, and other terms as defined previously. 16.14 Vehicle-Hours-Traveled (VHT) \\(VHT=n_d \\times TT_{avg}\\) where: \\(VHT\\) = vehicle-hours of travel, in units of veh-h, \\(TT_{avg}\\) = average travel time (equivalent to \\(\\bar{t}\\) in the average travel time calculation above, in units of h, and other terms as defined previously. Note that space-mean speed can also be calculated as \\(\\bar{u}_s=\\frac{VMT}{VHT}\\) 16.15 Vehicle-Hours-Delayed (VHD) \\(VHD=n_d \\times(TT_{avg}-TT_{FF})\\) where: \\(VHD\\) = vehicle-hours of delay, in units of veh-h, \\(TT_{FF}\\) = free-flow travel time in units of h, and other terms as defined previously. "],["ChapterCalibration.html", "17 Calibration 17.1 Introduction 17.2 Network Calibration 17.3 Vehicle Movement Model Calibration", " 17 Calibration 17.1 Introduction This page is currently under development. This section discusses common calibration items used for various facility types and how these items can be addressed in SwashSim. 17.2 Network Calibration link lengths link horizontal curvature grades stop bar position detector placement (for signal control) 17.3 Vehicle Movement Model Calibration 17.3.1 Signalized intersections Saturation flow rate: The saturation flow rates realized from a simulation are a function of the following factors: Vehicle spacing within the queue: This is primarily a function of the ‘stop gap’ value, which is the distance left between the front bumper of a following vehicle and the rear bumper of its leader vehicle, when stopped in a queue. The default values are: Small Auto - 8 ft Large Auto - 8 ft Small Truck - 13 ft Large Truck - 18 ft These values can be changed in the Settings, under the ‘General Vehicle Movement’ section. The vehicle type distribution will also impact the average stop gap values within any queue of vehicles. Driver type distribution: Generally, a higher percentage of more aggressive drivers in the traffic stream will lead to higher saturation flow rates. The driver type percentages can be revised in the Settings, under the Drivers section. Vehicle acceleration: When accelerating from a stop, vehicles will initially accelerate at their desired acceleration rate. This value, however, may be overridden (i.e., made lower) by the car-following model or the maximum acceleration capability of the vehicle. By default, desired acceleration values are higher for more aggressive driver types. The desired acceleration multiplier values can be revised in the Settings, under the Drivers section. Car-following model parameters: The parameters of the car-following model will influence the acceleration of a following vehicle. Most of the vehicles behind the lead vehicle in the queue will spend the majority of their time during the queue discharge process in car-following mode. As mentioned above, the acceleration value calculated from the car-following model will override the desired acceleration when the vehicle is in car-following mode. The maximum acceleration of the vehicle might override the car-following acceleration value. This typically happens for large trucks on inclines. More detail about the car-following model can be found in Car-Following Model. Link free-flow speed: The free-flow speed of the link(s) downstream of the link where vehicles are queued will influence the speed to which vehicles will accelerate, which in turn can influence the queue discharge rate. Vehicle desired speeds are a function of the link free-flow speed and the driver type. The desired speed multiplier values can be revised in the Settings, under the Drivers section. Queue length: Stop-gap values, vehicle type distribution 17.3.2 Two-lane highways Percentage split between passing and non-passing lanes in passing lane link driver type distribution percentage of driver types considered slower drivers "],["ChapterSimAnimation.html", "18 Simulation Animation 18.1 Initiating Simulation Animation Mode 18.2 Animation Playback Controls 18.3 Display Options", " 18 Simulation Animation The Map View screen, in addition to being used to create custom networks, also serves to display the animation of simulation results after a successful simulation run. Figure 18.1: Map View Toolbar Button 18.1 Initiating Simulation Animation Mode Once the simulation run has been successfully completed, go to the Map View screen and press the ‘Load Simulation Data’ button on the animation toolbar. Figure 18.2: Animation Toolbar (pre-simulation run) That will expand the animation toolbar options as shown below. Figure 18.3: Animation Toolbar (post-simulation run) 18.2 Animation Playback Controls 18.2.1 Start/Pause/Stop To start the animation, press the Play button. Figure 18.4: Animation Playback Controls (Play) Once the animation has started, you can pause it by pressing the same button (it will display the Pause icon). Figure 18.5: Animation Playback Controls (Pause) To stop the animation before the simulation duration is reached, press the Stop button. Figure 18.6: Animation Playback Controls (Stop) 18.2.2 Forward/Reverse To change the direction of the animation (i.e., increasing or decreasing simulation time), press the forward/reverse buttons, which will toggle. Figure 18.7: Animation Playback Controls (Forward Direction) Figure 18.8: Animation Playback Controls (Reverse Direction) 18.2.3 Animation Speed The animation speed can also be changed from 0.1X to 10X, using the ‘+’ and ‘-’ minus buttons, or the dropdown box. To use the latter, the animation must first be paused. Figure 18.9: Animation Playback Controls (Speed Increase/Decrease) Figure 18.10: Animation Playback Controls (Speed Increase/Decrease) 18.2.4 Simulation Time This field displays the current simulation time. Figure 18.11: Simulation Time To go directly to a specific time in the simulation, pause the simulation and then click directly on the time value with the mouse cursor (it will change to an edit box). Then type in the desired simulation time, and press ‘Enter’ or the ‘Go to’ button. When you resume the playback (press the Play button), the animation will start from the entered time. Note that once the time edit box is active, do not click in it again with the mouse, as this will immediately cancel the edit mode. Figure 18.12: Simulation Time Direct Set 18.3 Display Options 18.3.1 Show Vehicle Information Pressing the ‘Show Vehicle Info’ cycles through showing vehicle IDs, vehicle model #’s, or neither on the vehicle graphics objects. The vehicle IDs correspond to the sequence in which vehicles entered the network. The vehicle model IDs correspond to the specific vehicle type (e.g., Honda Accord, Ford F150, etc.). Figure 18.13: Show Vehicle IDs Figure 18.14: Show Vehicle IDs Figure 18.15: Show Vehicle IDs The figure below demonstrates the display of vehicle IDs. Figure 18.16: Show Vehicle IDs 18.3.2 Vehicle Properties While the animation is running or paused, individual vehicles can be clicked on (use the left mouse button and double click) to display a window that provides various details about that status of the vehicle (see Figure below). If you experience difficulty in clicking on a vehicle, try pausing the animation first. Figure 18.17: Vehicle Properties 18.3.3 Signal Controllers Pressing the ‘Signal Controllers’ toobar button will display a list of the signal controllers contained in the network. Figure 18.18: Animation Signal Control Toolbar Button Checking the ‘Show’ button for a listed controller will display the signal phasing and timing dialog for the selected signal controller. Figure 18.19: Signal Controller List Figure 18.20: Signal Controller During the animation, the movement arrow colors will match with the current signal indication (i.e., green, yellow, red) for that movement. This display is coordinated with the control point colors displayed on the intersection (see Figure below). Active Timing Phase – This represents the current active movement, colored in green. Recall that in the dual-ring diagram, phases 1 through 4 run from left to right in the top row and phases 5 through 8 run from left to right in the bottom row. Interval – Displays the active timing interval (i.e., green, yellow, all-red). Interval Time Remaining – Displays the time remaining in the active interval. Figure 18.21: Signal Controller Animation "],["ChapterSimLogic.html", "19 Simulation Logic Flow 19.1 First Vehicle Entry 19.2 Simulation Time Loop 19.3 End of Simulation Run", " 19 Simulation Logic Flow This section provides an overview of the sequence of steps that SwashSim employs to facilitate a simulation run. 19.1 First Vehicle Entry The set of entry nodes present in the network is looped through and for each one, the following are determined: The entry time into the network for the first vehicle to arrive; The generated headway plus the current simulation gives the network entry time for the subject vehicle. The fleet type (small auto, large truck, etc.) of the first vehicle to arrive. Determined randomly based on the respective fleet type percentages specified for the entry node. The specific vehicle model (e.g., Honda Civic). A vehicle model is determined randomly, per a uniform distribution, from all vehicle models available for simulation within the selected fleet type. The assigned entry lane of the entering vehicle; the vehicle fleet type may influence this assignment if there are certain vehicle type lane restrictions (e.g., HOV lane, truck-only lane, no trucks allowed lane) The assigned driver type for the entering vehicle; the lane assignment may influence the driver type assignment if policies such as ‘slower drivers keep right’ are in place for the downstream link(s) The desired speed for the entering vehicle/driver; the driver and vehicle types influence this setting 19.2 Simulation Time Loop The simulation time step is 0.1 s (i.e., calculations are performed 10 times per second). The program starts the execution of the simulation time loop. This loop starts at zero and ends at the total of the warm-up and simulation duration times. If the warm-up time is 900 s and the simulation duration is 3600 s, then the total simulation will be 4500 s (75 min). Since the simulation time step is 0.1 s, a total of 45,000 iterations of the simulation time loop will be performed. Inside of the simulation time loop, the following actions are performed: Check whether the entry time of the next vehicle to enter the network at each entry node is equal to, or greater than, the simulation time; if so: 19.2.1 Create new vehicle Create new vehicle (per previously determined characteristics–fleet type, model type, driver type, assigned entry link lane, desired speed) and insert into the network at the corresponding entry node If a vehicle is downstream of the entering vehicle in the same lane, set the leader ID property of the entering vehicle accordingly and calculate the distance to this leader vehicle For the given entry speed, determine the appropriate transmission gear Determine engine RPM and torque/power output for the given vehicle speed and transmission gear Determine position of vehicle on entry link–this will be slightly downstream of beginning of link (i.e., entry node location) if the vehicle entry time was not an even increment of the simulation time step Identify if vehicle is considered to be in a platoon (i.e., reasonably close to a leading vehicle); See Leader/Follower Status for more information. Determine the time of the next vehicle to enter at the entry node for which a vehicle just entered For this next vehicle to enter the network, perform the same steps, 2-6, under the ‘First Vehicle Entry’ section 19.2.2 Update Status of Control Points If traffic signals are present in the network, update the status of the control points associated with the traffic signals See signalized Intersection Control for more information. If ramp metering signals are present in the network, update the status of the control points associated with the ramp metering signals More information about ramp metering control can be found here. If unsignalized intersections are present (2-way stop, all-way stop, roundabout), update the status of the control points associated with these intersections More information about gap acceptance logic for unsignalized intersections, and permitted left turns at signalized intersections, can be found here. 19.2.3 Update Vehicle Properties When one or more vehicles are present in the network, perform the following actions for each vehicle: If it is possible for the vehicle to consider a lane change (e.g., it is on a link with more than one lane), call the lane changing logic and identify the desired lane for the next time step (i.e., the ‘target lane’); If it is not possible to change lanes, the target lane ID is set equal to current lane ID; See Lane Changing for more information. Update leader and follower ID’s as necessary for lane changes Calculate acceleration this a function of Acceleration Mode, which is a function of platoon status, control points, etc. Calculate velocity (\\({v_t}={v_{t-1}}+{a_t} \\Delta t\\)) Calculate position (\\({x_t}={x_{t-1}}+{v_{t-1}} \\Delta t + 0.5{a_t} \\Delta t^2\\)) If the emissions/fuel consumption calculation feature is enabled, the corresponding calculations are performed Check if a vehicle has exited its current travel link; if so: Move it onto its target link Set desired speed for new link; For more information, see Vehicle Movement Logic. i. Regular tangent links ii. Regular curved links iii. Passing in oncoming lane of two-lane highway iiii. Truck speed on downgrade Set turning movement and new target link i. Random, based on end-of-link turning percentages ii. Route assignment–see Route Assignment for more information. 19.2.4 Check Detector Status Check if a vehicle has crossed a detector; if so, update detector measurements 19.3 End of Simulation Run When the simulation time loop has completed, any requested performance measure outputs are calculated and then written to the specified project output folder "],["ChapterVehicleGeneration.html", "20 Vehicle Generation 20.1 Vehicle Entry Headway Distribution 20.2 Set Vehicle Entry Lane 20.3 Set Vehicle Driver Type", " 20 Vehicle Generation 20.1 Vehicle Entry Headway Distribution Two types of vehicle entry distributions can be specified: Uniform or Random. For a uniform distribution, each vehicle will enter at the same headway, i.e., 3600 s/h divided by the entry volume (in veh/h). For example, an entry volume will result in a vehicle entering the network every 2 seconds. If the ‘Random’ distribution type is selected, two different distributions will be used, as follows: Entry flow rate &lt; 900 veh/h/ln -&gt; Negative Exponential distribution Entry flow rate ≥ 900 veh/h/ln -&gt; Normal distribution The standard deviation for the Normal distribution is calculated as: (Average Headway × Number of Lanes - MinArrivalHeadway) / 2.5 The minimum arrival headway is calculated as: DesiredHeadwayMultiplier × 1.1 + (StopGap + MinVehLength) / DesiredSpeed 20.2 Set Vehicle Entry Lane Iterate through each lane in the link If the lane is of type ‘Regular’, increment the number of candidate lanes Initially set the vehicle’s desired lane to lane ID ‘1’ (the outer-most lane of the link) Check the entry link type, if it is of type ‘Two-Lane Highway Entry’, set the desired lane ID to ‘1’ and exit Commercial trucks are biased to outer lanes. Thus, if the vehicle fleet type is either small truck or large truck: If the number of entry link lanes &gt; 2 Set the number of candidate lanes = number of entry link lanes - 1 Otherwise Set the number of candidate lanes = number of entry link lanes Identify the vehicle on each lane that is closest to the entry node (i.e., no other vehicle is between this vehicle and the entry node on the given lane) Get the time at which this vehicle entered the system. If there is no vehicle on this lane, the time will be set to zero. Compare the system entry times for each of the vehicles nearest to the entry node (one per lane) The lane that contains the vehicle with the earliest system entry time (or zero for a lane with no vehicle) will be selected as the entry lane. In the unlikely case that more than one lane has the same value for earliest system entry time, the outer most lane of those options will be selected. 20.3 Set Vehicle Driver Type This method sets the driver type for a vehicle that has been assigned to a given lane ID (referred to below as LaneNum) Set the number of driver types for the subject vehicle NumDriverTypes = MaxDriverType – MinDriverType + 1 (these driver type values are specified in the Vehicle Settings screen) Set the number of driver types per lane NumDriverTypesPerLane = NumDriverTypes divided by total number of lanes on the link The result of this calculation is stored as an integer value. If the actual result is a fractional value the result, the remainder is stored separately. For example… if the number of driver types is 10 and the number of link lanes is 2, the result of this calculation is 5 and the remainder = 0, if the number of driver types is 10 and the number of link lanes is 3, the result of this calculation is 3 and the remainder = 1. Set the minimum driver type for the assigned LaneNum MinDriverTypeForLaneId = (LaneNum - 1) \\(\\times\\) number of driver types per lane + MinDriverType Set the maximum driver type for the assigned LaneNum If (LaneNum &lt; Total Lanes on Link) MaxDriverTypeForLaneId for LaneNum = LaneNum \\(\\times\\) number of driver types per lane + (MinDriverType - 1) Otherwise MaxDriverTypeForLaneId for LaneNum = LaneNum \\(\\times\\) number of driver types per lane + (MinDriverType - 1) + remainder For the example of 10 driver types and 3 link lanes, the result will be as follows: For LaneNum = 1; MinDriverType = 1, MaxDriverType = 3 For LaneNum = 2; MinDriverType = 4, MaxDriverType = 6 For LaneNum = 3; MinDriverType = 7, MaxDriverType = 10 If the ‘Bias slower vehicles to right’ has NOT been selected, or the number of driver types per lane &lt; 1 Generate a uniform random number, between 0-1 and convert to a percentage (i.e., multiply by 100) Iterate from MinDriverType to MaxDriverType Compare generated random percentage value to the cumulative driver type percentages (based on percentage from Driver Settings screen) If (random percentage value ≤ Cumulative Driver Type Percentage for given driver type return current driver type Otherwise Increment current driver type and repeat above check Otherwise Generate a uniform random number, between 0-1 and assign to ChanceForRandomDriverType If (ChanceForRandomDriverType &lt;= Probability of Random Lane Assignment (from Traffic Data inputs) Iterate from MinDriverType to MaxDriverType and assign driver type per same process described above (i.e., compare random number to cumulative driver type percentages) Otherwise DriverType = Generate a uniform random number between MinDriverType and MaxDriverType for the given lane number (Note that for this situation the assigned driver types will not follow the distribution specified in the driver settings) "],["ChapterLeaderFollowerStatus.html", "21 Leader/Follower Status 21.1 Variable Definitions 21.2 Logic Conditions", " 21 Leader/Follower Status If a vehicle is identified as being a follower, it means that the vehicle is close enough (either in distance or time) to the vehicle in front of it that the car-following model should be included in the process of determining the appropriate acceleration rate for a vehicle. While an acceleration rate per the car-following model is calculated, it should be noted that a different acceleration rate may ultimately govern. If a vehicle is not identified as being a follower (i.e., it is a leader), then the calculation of an acceleration rate per the car-following model is skipped for that time step. The variables and logic used to determine whether a vehicle is considered to be in a follower status are as follows: 21.1 Variable Definitions DistanceToLeadVehicle = The distance between the front bumper of the subject vehicle and the rear bumper of the lead vehicle, in feet SubjectVehicleSpeed = Velocity of the subject vehicle, in ft/s Headway = time elapsed for subject vehicle to travel distance equal to DistanceToLeadVehicle, in seconds HeadwayThreshold = Base time headway value to consider for follower status. Default = 2.5 s, can be revised in the settings screen for car following model parameters. FollowerHeadwayBuffer = Additional headway buffer for which to consider a vehicle for follower status, Fixed value of 3 s. CarFollowDistance = Distance between subject vehicle front bumper to rear bumper of the lead vehicle, for which to consider a vehicle for follower status as a secondary measure. Default = 110 ft, can be revised in CarFollowModelParms.xml file. 21.2 Logic Conditions Initially assign subject vehicle to Status = Leader if DistanceToLeadVehicle (ft) is unassigned (i.e., no vehicle in front of subject vehicle in same lane), Status = Leader else if (SubjectVehicleSpeed &gt; 0) Headway = DistanceToLeadVehicle / SubjectVehicleSpeed if (Headway &lt; (HeadwayThreshold + FollowerHeadwayBuffer) Status = Follower else if (DistanceToLeadVehicle &lt; CarFollowDistance) Status = Follower else if (DistanceToLeadVehicle &lt; CarFollowDistance) Status = Follower Note: In the vehicle properties dialog displayed in the simulation animation and the time step data output file, a value of -1 for ‘Distance to Lead Vehicle’ means that there is no vehicle ahead of the subject vehicle in the same lane. In this case, the subject vehicle will be of type ‘Leader’. "],["ChapterVehMoveLogic.html", "22 Vehicle Movement Logic 22.1 Longitudinal Motion 22.2 Lane Changing", " 22 Vehicle Movement Logic This section provides an overview of the logic/models employed to control the movement of vehicles within SwashSim. The models apply to the longitudinal (forward) motion of a vehicle (acceleration, velocity), the lateral (lane changing) movement of a vehicle, or a combination of the two, such as for passing in the oncoming lane of a two-lane highway. 22.1 Longitudinal Motion The longitudinal motion of a vehicle is a function of the following factors: proximity to a traffic control point (e.g., stop bar for a signalized intersection) proximity to a downstream queue of traffic proximity to a lead vehicle actual speed relative to desired speed proximity to change in change in free-flow speed for destination link 22.1.1 Acceleration Mode The above factors, which might apply individually or in combination, are used to assign an ‘Acceleration Mode’ to a vehicle. This Acceleration Mode is then used to assign a preset acceleration value or calculate one based on applicable factors and their current status. The Acceleration Mode classifications assigned in SwashSim are discussed in more detail at Acceleration Mode. 22.1.2 Queue Status At any given time step, a vehicle will be in one of four queuing states: Not in queue Slowing for queue Moving in queue Stopped in queue The definitions of these states are based upon the guidance in the HCM 2016 [Chapter 36 (Concepts: Supplemental), page 42]. 22.2 Lane Changing Models applied to determine a vehicle’s lane-changing behavior are categorized as: Mandatory Discretionary Anticipatory These models are discussed in more detail at Lane Changing. Models that consider the combination of longitudinal and lateral movement are used in modeling two-lane highways, and are discussed at Two-Lane Highway Passing. "],["ChapterAccelMode.html", "23 Acceleration Mode 23.1 UnimpededNormal 23.2 CarFollow 23.3 StoppingForQueue 23.4 StoppingForControl 23.5 Stopped 23.6 MaxAccel 23.7 Max Decel 23.8 Desired Accel 23.9 Desired Decel 23.10 DownstreamLinkSpeedChange 23.11 SlowingForDowngrade", " 23 Acceleration Mode The applicable ‘Acceleration Mode’ for a vehicle is determined at every time step. The assigned acceleration mode informs the specified/calculated acceleration rate. 23.1 UnimpededNormal In this acceleration mode, the vehicle motion is not affected by a leader vehicle or by any traffic controls. The acceleration rate that gets applied is a function of the vehicle’s current velocity (v), as follows: v &lt; desired speed, assign desired acceleration (e.g., a vehicle is discharging from a queue after a signalized control point turns from a red to green indication. v &gt; desired speed, assign minimum deceleration; Default value = \\(-5\\) ft/s/s. This value can be changed in the Settings, under the ‘General Vehicle Movement’ section. Note that there is a small tolerance threshold for the desired speed; that is, a vehicle is considered to be traveling at its desired speed if it is within the following range: \\[\\biggl\\lbrack DesiredSpeed\\times\\frac{100-DesiredSpeedDeviation}{100}\\biggl\\rbrack\\leq DesiredSpeed\\leq \\biggl\\lbrack DesiredSpeed\\times\\frac{100+DesiredSpeedDeviation}{100}\\biggl\\rbrack\\] where: \\({DesiredSpeed}=\\) desired speed of subject vehicle, in ft/s. The determination of this value is described here, and \\({DesiredSpeedDeviation}=\\) desired speed margin, in ft/s. This value is a function of the Driver Type. 23.2 CarFollow If a vehicle meets the following conditions: is in a following status (Leader/Follower Status) is not stopped (i.e., velocity &gt; 0) is not stopping for a control then an acceleration rate will be calculated according to the car-following model. 23.3 StoppingForQueue This acceleration mode applies when a vehicle needs to decelerate to join the back of a queue. The applied deceleration rate is calculated as follows: \\[DecelRateStopForQueue=-0.5\\times\\frac{VehicleSpeed^2}{DistanceToLeadVehicle-StoppingBuffer}\\] where: \\({DecelRateStopForQueue}=\\) deceleration rate required to bring vehicle to a stop behind its lead vehicle (the last vehicle in queue), ft/s/s, \\({DistanceToLeadVehicle}=\\) distance between front bumper of subject vehicle and rear bumper of lead vehicle, in ft, and \\({StoppingBuffer}=\\) Stop gap for vehicle fleet type, in feet (values can be changed in the Settings, under the ‘Car Following’ section). 23.4 StoppingForControl This acceleration mode applies when a vehicle needs to decelerate to stop immediately upstream of a control point, such as for a signalized intersection. The applied deceleration rate is calculated as follows: \\(DecelRateStopForControl=-0.5\\times\\frac{VehicleSpeed^2}{DistanceToControlPoint-StoppingBuffer}\\) where: \\({DecelRateStopForControl}=\\) deceleration rate required to bring vehicle to a stop behind the control point, ft/s/s, \\({DistanceToControlPoint}=\\) distance between front bumper of subject vehicle and control point location, in ft, and \\({StoppingBuffer}=\\) 2 ft (values can be changed in the Settings, under the Car Following section). 23.5 Stopped This acceleration mode applies any time a vehicle is stopped (velocity = 0). This typically occurs when a vehicle is stopped due to a control point (e.g., signalized intersection, ramp meter), either within the queue or at the front of the queue. 23.6 MaxAccel Regardless of the acceleration mode assigned to a vehicle, the maximum acceleration of a vehicle always serves as a constraint against which other candidate acceleration values are checked. The maximum acceleration value is not static and is not user-definable. Rather, it is calculated internally as a function of numerous factors, as described here. If another acceleration mode is initially assigned and its resultant acceleration value exceeds that of the calculated maximum acceleration value for the vehicle, the acceleration mode will be reassigned to ‘MaxAccel’. The maximum acceleration mode is typically applied in situations where a vehicle, usually a commercial truck, is attempting to maintain its desired speed on an upgrade. 23.7 Max Decel The default value is \\(-19\\) ft/s/s. This value is consistent with what is generally considered to be an emergency braking deceleration rate. This value can be changed in the Settings, under the ‘General Vehicle Movement’ section. 23.8 Desired Accel This value is calculated as: \\[DesiredAcce{l_i}=BaseDesiredAccelRate\\times DesiredAccelRateMultiplie{r_i}\\] where: \\({DesiredAccel_i}=\\) desired acceleration rate for driver type i, in ft/s/s, \\({BaseDesiredAccelRate}=\\) base desired deceleration rate for all driver types, in ft/s/s. Default value = 4 ft/s/s (this value can be changed in in the Settings, under the ‘General Vehicle Movement’ section), and \\({DesiredAccelRateMultiplier_i}=\\) acceleration rate multiplier applied to desired acceleration rate for driver type i (proportion). This value can be changed in the Settings, under the ‘Drivers’ section. 23.9 Desired Decel \\[DesiredDece{l_i}=BaseDesiredDecelRate\\times DesiredDecelRateMultiplie{r_i}\\] where: \\({DesiredDecel_i}=\\) desired deceleration rate for driver type i, in ft/s/s. \\({BaseDesiredDecelRate}=\\) base desired deceleration rate for all driver types, in ft/s/s. Default value = \\(-10\\) ft/s/s. This value can be changed in the Settings, under the ‘General Vehicle Movement’ section). \\({DesiredDecelRateMultiplier_i}=\\) deceleration rate multiplier applied to desired deceleration rate for driver type i (proportion). This value can be changed in the Settings, under the ‘Drivers’ section. 23.10 DownstreamLinkSpeedChange For situations in which the assigned free-flow speed (FFS) for a vehicle’s destination link is different than the FFS for its current link, the following rules are applied: Destination Link FFS &gt; Current Link FFS: Vehicle will attempt to accelerate to achieve higher desired speed (as a function of higher link FFS), starting when it enters destination link Destination Link FFS &lt; Current Link FFS: Vehicle will attempt to decelerate to achieve lower desired speed (as a function of lower link FFS), starting upstream of destination link entry location. More specifically: \\[DecelDistance=\\frac{VehicleSpeed^2 - DesiredSpeedDestinationLink^2}{2\\times BaseDecelRate}\\] where: \\({DecelDistance}=\\) distance required to slow vehicle to its desired speed for the destination link, ft, \\({VehicleSpeed}=\\) distance between front bumper of subject vehicle and rear bumper of lead vehicle, in ft, \\({DesiredSpeedDestinationLink}=\\) desired speed for subject vehicle, based on the assigned free-flow speed of the destination link, and \\({BaseDecelRate}=\\) desired deceleration rate / 4. If the DistanceToDestinationLink \\(\\leq\\) DecelDistance, calculate \\[DecelRateForLinkSpeedChange=-0.5\\times\\frac{VehicleSpeed^2 - DesiredSpeedDestinationLink^2}{DistanceToDestinationLink}\\] Use the minimum of: BaseDecelRate, DecelRateForLinkSpeedChange, MaxDecel where: \\({DecelRateForLinkSpeedChange}=\\) deceleration rate required to bring vehicle to its desired speed for the destination link, ft/s/s, \\({DistanceToLeadVehicle}=\\) distance between front bumper of subject vehicle and rear bumper of lead vehicle, in ft, and \\({DistanceToDestinationLink}=\\) difference between position of vehicle on current link and the start location of its destination link, ft. 23.11 SlowingForDowngrade Forthcoming "],["ChapterDesiredSpeed.html", "24 Desired Speed 24.1 Horizontal Curves 24.2 Tangents", " 24 Desired Speed 24.1 Horizontal Curves For very low-speed horizontal curves, such as at arterial intersections, the desired speed is set in the same manner as for a tangent link (see section below). For higher-speed horizontal curves, such as on freeways and two-lane highways, the process for setting the desired speed is as follows. A modified version of the horizontal curve speed model developed by Bonneson, Pratt, and Miles (2007) is implemented in SwashSim. Since the simulation tool models multiple driver types, it was desirable to implement the model such that there was range of curve speeds selected by drivers. The easiest way to create this range of speeds was to create a distribution from the 85th percentile and average curve speeds predicted by the Bonneson, Pratt, and Miles (2007) model. The original equation from the model is as follows. \\[ {V_{c,a}} = {\\left( {\\frac{{15.0{R_p}(0.112 - 0.00066{V_{t,a}} + 0.000091V_{t,a}^2 - 0.0108{I_{tk}} + e)}}{{1 + 0.00136{R_p}}}} \\right)^{0.5}} \\] where: \\({V_{c,a}}\\) = average curve speed (mi/h), \\({V_{t,a}}\\) = average tangent speed (mi/h), \\({R_p}\\) = travel path radius (replaced by curve radius in modified model) (ft), \\({I_{tk}}\\) = indicator variable for heavy vehicles (1.0 if model is used to predict heavy vehicle speeds, 0.0 otherwise), and \\(e =\\) superelevation rate (decimal) The modified version of the equation substitutes the curve radius for the travel path radius (\\({R_p}\\)). In order to integrate the model into the simulation tool (SwashSim), some assumptions had to be made regarding the average and 85th percentile tangent speeds. The average tangent speed for passenger cars (\\({V_{t,a,PC}}\\)) was assumed to equal the FFS input in the simulation tool. Based on the findings in the Bonneson, Pratt, and Miles (2007) study, the average tangent speed for heavy vehicles (\\({V_{t,a,HV}}\\)) was assumed to be 97 percent of \\({V_{t,a,PC}}\\). For both passenger cars and heavy vehicles, the 85th percentile tangent speed was assumed to be 11 percent higher than the average tangent speed. This was also based on findings in the Bonneson, Pratt, and Miles (2007) study. The curve speeds were assumed to follow a normal distribution. The mean was set equal to the average curve speed, and the standard deviation was estimated from the average and 85th percentile curve speeds. The standard deviation was then used to calculate the 15th percentile curve speed. This distribution was applied to the 10 (default) driver types in the simulation tool. The 15th percentile curve speed was assigned to driver type 1 (the most conservative driver), and the 85th percentile curve speed was assigned to driver type 10 (the most aggressive driver). The curve speeds for the other driver types were linearly interpolated between these two speeds. If the driver’s desired speed on the curve exceeded its desired speed on the tangent, the desired curve speed was set equal to the desired tangent speed. 24.2 Tangents The desired speed for a vehicle is calculated per the following equation. \\[DesiredSpeed_{ij}=LinkFreeFlowSpeed_{j}\\times DesiredSpeedMultiplier_{i}\\times VehicleTypeDesiredSpeedProportion_{k}\\] where: \\(Desired Speed_{ij} = \\text{desired speed for vehicle/driver } i \\text{ on link } j \\text{ (ft/s)}\\), \\(LinkFreeFlowSpeed_{j} = \\text{free-flow speed for link } j \\text{ (ft/s)}\\), \\(Desired Speed Multiplier_{i} = \\text{multiplier for driver type } i \\text{ (unitless)}\\), and \\(VehicleTypeDesiredSpeedProportion_{k} = \\text{multiplier for vehicle type } k \\text{ (unitless)}\\). The desired speed multiplier value (as a function of driver type) and desired speed proportion value (as a function of vehicle type) can be changed in the Settings. The link free-flow speed is coded by the user in the network setup. Additional information about desired speed determination for passing maneuvers on two-lane highways is discussed here. 24.2.1 Heavy Vehicles Bonneson, Pratt, and Miles (2007) showed that the desired speeds of heavy vehicles on level grade tangents are generally lower than those of passenger cars. This relationship was incorporated into the simulation tool by using a desired speed proportion variable that is a function of the heavy vehicle type. This value is multiplied by the passenger car free-flow speed to get a heavy vehicle free-flow speed. Free-flow speed data collected from two-lane highways in North Carolina, Oregon, and Montana, were used to obtain estimates of these desired speed proportions (Washburn et al. (2018)). The following table presents these values. Heavy Vehicle Type Desired Speed Proportion Single-Unit Truck 0.98 Intermediate Semi-Trailer Truck 0.95 Interstate Semi-Trailer Truck 0.95 Double Semi-Trailer Truck 0.93 "],["ChapterCarFollow.html", "25 Car Following", " 25 Car Following If a vehicle is considered to be a follower, the program will calculate an acceleration value for this vehicle according to a car-following model. This calculated acceleration is also subject to the following constraints: the vehicle’s maximum acceleration the vehicle’s maximum deceleration safe following distance; that is, if the lead vehicle decelerates at its maximum value, the acceleration of the following vehicle must not move it so close to the lead vehicle such that it would not be able to stop before colliding with the lead vehicle in this situation. If the vehicle is not considered to be a follower, the calculation of an acceleration according to a car-following model is skipped. The determination of whether or not a vehicle is in a follower status is described here. SwashSim employs the Modified-Pitt car-following model (Cohen (2002a) and Cohen (2002b)). The Modified-Pitt car-following model has been demonstrated (Cohen (2002a) and Cohen (2002b); Washburn and Cruz-Casas (2010)) to work well for multiple traffic flow regimes (e.g., uninterrupted flow and queue arrival/discharge flow). The Modified-Pitt car-following equation calculates the acceleration value for a trailing vehicle based on intuitive parameters such as the speed and acceleration of the lead vehicle, the speed of the trailing vehicle, the relative position of the lead and trail vehicles, as well as a desired headway. This equation also incorporates a sensitivity factor, K, which is discussed in the next subsection. This equation allows for relatively easy calibration. Car-following models are generally based on a ‘driving rule’, such as a desired following distance or following headway. The Modified-Pitt model is based on the rule of a desired following headway. The main form of the model is as follows. \\[{a_f}(t+T)=K\\frac{{s_l}(t+R)-{s_f}(t+R)-{L_l}-h{v_f}(t+R)+[{v_f}(t+R)-{v_l}(t+R)]T-\\frac{1}{2}{a_l}(t+T)T^2}{T(h+\\frac{1}{2T})}\\] where: \\({a_f}(t+T) = \\text{acceleration of follower vehicle at time } t+T \\text{ (ft/s}^2)\\), \\({a_l}(t+T) =\\) acceleration of lead vehicle at time \\(t+T \\text{ (ft/s}^2)\\), \\({s_l}(t+R) =\\) position of lead vehicle at time \\(t+R\\) as measured from upstream (ft), \\({v_f}(t+R) =\\) speed of follower vehicle at time \\(t+R\\) (ft/s), \\({v_l}(t+R) =\\) speed of lead vehicle at time \\(t+R\\) (ft/s), \\({L_l} =\\) length of lead vehicle plus a buffer based on jam density (ft), \\({h} =\\) time headway parameter (refers to headway between rear bumper plus a buffer of lead vehicle to front bumper of follower) (s), \\({T} =\\) simulation time-scan interval (s), \\({t} =\\) current simulation time step (s), \\({R} =\\) perception-reaction time (s), and \\({K} =\\) sensitivity parameter (unitless). Figure 25.1: Car-following Illustration The ‘’K’’ value is a sensitivity parameter used to adjust the acceleration calculated by the car-following model. This factor is analogous to a spring constant used to describe how tightly or loosely a coupled system (a platoon of vehicles in this case) operates. This factor essentially adjusts how quickly or slowly acceleration changes, for one or more vehicles, propagate through the platoon. By default, two separate values for the sensitivity parameter, K, are used in the car-following model—one for uninterrupted flow and one for queue arrival/discharge flow. Cohen stated that a larger K value should be used in interrupted flow conditions (a more tightly coupled system) due to over-damping effects (Cohen (2002b)). This assumption was tested in a work zone simulation situation (Washburn, Watson, and Song (2014)) and was found to yield good results. Vehicles had a smoother interaction in the work zone (uninterrupted flow, a more loosely coupled system) with K = 0.75 and the queue arrival and queue discharge processes performed well with K = 1.1. The definition of the queue arrival area was 300 ft upstream of the last vehicle in the queue, and the definition of the queue discharge area was 300 ft downstream of a stop bar (see Figure below). These values can be revised in the Settings, under the ‘Car Following’ section. Figure 25.2: Modified-Pitt K-values "],["ChapterMaxAccel.html", "26 Maximum Acceleration", " 26 Maximum Acceleration The approach used to model vehicle maximum acceleration in SwashSim is based on the vehicle performance theory and equations given in Principles of Highway Engineering and Traffic Analysis (Mannering and Washburn (2019)). This approach utilizes detailed information about a vehicle’s physical and powertrain characteristics. An overview of this approach is given here. The approach at its most basic level determines acceleration through the fundamental equation relating tractive force to resistance forces, as follows. \\[F=ma+{R_a}+{R_{rl}}+{R_g}\\] The tractive force, F, referred to here as available tractive effort, is taken as the lesser of maximum tractive effort and engine-generated tractive effort. Maximum tractive effort is a function of several of the vehicle’s physical characteristics (such as wheelbase, center of gravity, and weight) and the roadway coefficient of road adhesion. Maximum tractive effort represents the amount of longitudinal force that can be accommodated by the tire-pavement interface. Engine-generated tractive effort is a function of engine torque, transmission and differential gearing, and drive wheel radius. For vehicles with low power-to-weight ratios, such as commercial trucks, maximum tractive effort is very rarely the governing condition. Thus, the acceleration calculations for trucks in SwashSim are based on engine-generated tractive effort. The major resistance forces are aerodynamic, rolling, and grade. The equation for determining aerodynamic resistance is \\[{R_a}=\\frac{\\rho}{2}{C_D}{A_f}{V^2}\\] where: \\({R_a}=\\) aerodynamic resistance (lb), \\(\\rho=\\) air density (slugs/ft\\(^3\\)), \\({C_D}=\\) coefficient of drag (unitless), \\({A_f}=\\) frontal area of the vehicle (projected area of the vehicle in the direction of travel) (ft\\(^2\\)), and \\({V}=\\) vehicle speed (ft/s). The coefficient of rolling resistance for road vehicles operating on paved surfaces is approximated as \\[{f_{rl}}=0.01(1+\\frac{V}{147})\\] where: \\({f_{rl}}=\\) coefficient of rolling resistance (unitless), and \\({V}=\\) vehicle speed (ft/s). The rolling resistance, in lb, is simply the coefficient of rolling resistance multiplied by \\({W \\cos \\theta_g}\\), the vehicle weight acting normal to the roadway surface. For most highway applications \\({\\theta_g}\\) is very small, so it can be assumed that \\({\\cos \\theta_g} = 1\\), giving the equation for rolling resistance (\\({R_{rl}})\\) as \\[{R_{rl}}={f_{rl}}W\\] Grade resistance is simply the gravitational force (the component parallel to the roadway) acting on the vehicle. The expression for grade resistance (\\({R_g})\\) is \\[{R_g}=W\\sin{\\theta_g}\\] As in the development of the rolling resistance formula, highway grades are usually very small, so \\({\\sin \\theta_g \\tan \\approx \\theta_g}\\). Thus, grade resistance is calculated as \\[{R_g}\\approx W\\tan{\\theta_g}=WG\\] where: \\({G}=\\) grade, defined as the vertical rise per some specified horizontal distance (ft/ft). Grades are generally specified as percentages for ease of understanding. Thus a roadway that rises 5 ft vertically per 100 ft horizontally (\\({G} = 0.05\\) and \\({\\theta_g} = 2.86^\\circ\\)) is said to have a 5% grade. The relationship between vehicle speed and engine speed is \\[V=\\frac{2\\pi r{n_e}(1-i)}{\\varepsilon_0}\\] where: \\({V}=\\) vehicle speed (ft/s), \\({n_e}=\\) engine speed (crankshaft revolutions/s), \\({i}=\\) slippage of the drive axle, and \\({\\epsilon_0}=\\) overall gear reduction ratio. The overall gear reduction ratio is a function of the differential gear ratio and the transmission gear ratio, which is a function of the selected transmission gear for the running speed. This equation can be rearranged to solve for engine speed given the current vehicle speed (if vehicle speed is zero, engine speed is a function of throttle input). With the calculated engine speed, the torque being produced by the engine can be determined from the torque-engine speed relationship. For example, assuming an engine speed of 2000 revolutions/min with the torque-engine speed relationship (Paccar PX-7 Engine) shown in the following figure, the resulting torque is 660 ft-lb. Figure 26.1: Torque-Engine Speed Curve for a Paccar PX-7 Engine (Washburn and Ozkul (2013)) In addition, the figure below illustrates the torque-engine speed relationship for a Paccar MX-13 engine. Figure 26.2: Torque-Engine Speed Curve for a Paccar MX-13 Engine (Washburn and Ozkul (2013)) Power is the rate of engine work, expressed in horsepower (hp), and is related to the engine’s torque by the following equation: \\[h{p_e}=\\frac{2\\pi {M_e}{n_e}}{550}\\] where: \\({hp_\\epsilon}=\\) engine-generated horsepower (1 horsepower equals 550 ft-lb/s), \\({M_\\epsilon}=\\) engine torque (ft-lb), and \\({n_\\epsilon}=\\) engine speed (crankshaft revolutions/s). The engine-generated tractive effort reaching the drive wheels is given as: \\[{F_e}=\\frac{{M_e}{\\varepsilon_0}{\\eta_d}}{r}\\] where: \\({F_\\epsilon}=\\) engine-generated tractive effort reaching the drive wheels (lb), \\({M_\\epsilon}=\\) engine torque (ft-lb), \\({\\epsilon_0}=\\) overall gear reduction ratio, \\({\\eta_d}=\\) mechanical efficiency of the drivetrain, and \\({r}=\\) radius of the drive wheels (ft). Note that since torque and horsepower are directly related, if only a power-engine speed relationship is available, this can be converted to a torque-engine speed relationship through the above equation. For determining vehicle acceleration, the following equation is rearranged and an additional term, \\({\\gamma_m}\\), to account for the inertia of the vehicle’s rotating parts that must be overcome during acceleration, is included. \\[a=\\frac{F-\\sum R}{{\\gamma_m}m}\\] \\({\\gamma_m}\\), referred to as the mass factor, is approximated as: \\[{\\gamma _m}=1.04+0.0025\\varepsilon_0^2\\] Vehicle Characteristics Passenger Car Single Unit Truck Intermediate Semi-Trailer Interstate Semi-Trailer Semi-tractor+double-trailer Vehicle Height (ft) 4.46 10.00 10.00 10.00 10.00 Vehicle Width (ft) 5.74 7.00 8.00 8.00 8.00 Vehicle Length (ft) 16.00 29.00 55.00 68.50 74.60 Vehicle Weight (lb) 3060 25000 37000 53000 55000 Maximum Torque (lb-ft) 139 660 1650 1650 1650 Maximum Power (hp) 197 300 485 485 485 Wheel Radius (ft) 1.03 1.66 1.66 1.66 1.66 Differential Gear Ratio 4.77 4.40 3.50 3.50 3.50 Transmission Gear Ratio Passenger Car Single Unit Truck Intermediate Semi-Trailer Interstate Semi-Trailer Semi-tractor+double-trailer Gear 1 3.27 7.59 11.06 11.06 11.06 Gear 2 2.13 5.06 8.20 8.20 8.20 Gear 3 1.52 3.38 6.06 6.06 6.06 Gear 4 1.15 2.25 4.49 4.49 4.49 Gear 5 0.92 1.50 3.32 3.32 3.32 Gear 6 0.66 1.0 2.46 2.46 2.46 Gear 7 N/A 0.75 1.82 1.82 1.82 Gear 8 N/A N/A 1.35 1.35 1.35 Gear 9 N/A N/A 1.00 1.00 1.00 Gear 10 N/A N/A 0.74 0.74 0.74 Additional information about how this methodology is incorporated into simulation is described in Washburn and Ozkul (2013) and Ozkul (2014). "],["ChapterLaneChanging.html", "27 Lane Changing 27.1 Mandatory Lane Changing 27.2 Discretionary Lane Changing 27.3 Anticipatory Lane Changing 27.4 Vehicle Lane Change Modes", " 27 Lane Changing The lane-changing logic is composed of mandatory, discretionary, and anticipatory. The basic elements of a vehicle lane change are illustrated in the following schematic. Figure 27.1: Lane Changing Illustration 27.1 Mandatory Lane Changing A mandatory lane change is the highest priority and must be checked first. If it does not apply, then other lane change options can be checked. A mandatory lane change is typically needed for one of the following conditions: The vehicle is traveling on an acceleration auxiliary lane and must change lanes in order to merge with the mainline freeway traffic. The vehicle is not on the proper lane for the desired movement on the downstream link. The vehicle is on a lane which will be dropped downstream. The vehicle is assigned to a special purpose lane (e.g., HOV) that it is not currently in. The vehicle is on a lane which is blocked downstream. An overview of the mandatory lane-changing logic employed in SwashSim is as follows. Identify desired lane (nearest lane that accommodates assigned movement (left, through, right) Identify leader and follower vehicle on desired lane Closest vehicle in front, closest vehicle behind Determine if gap is sufficient between two vehicles for subject vehicle to merge into Two gaps to consider, one between subject vehicle and leader vehicle, and one between subject vehicle and follower vehicle Make sure vehicles will not collide Calculate the subject vehicle acceptable risk (measured as a rate of acceleration), as follows: \\[ AcceptableRisk=\\left\\{\\begin{array}{l} MinAcceptableRisk&amp;\\mbox{If urgency factor &lt; 0.2 (default)}\\\\ MaxAcceptableRisk&amp;\\mbox{If urgency factor &gt; 1.0 (default)}\\\\ MinAcceptableRisk+\\frac{MaxAcceptableRisk-MinAcceptableRisk\\times (UrgencyFactor-UrgencyThreshold)} {1-UrgencyThreshold}&amp;\\mbox{otherwise}\\\\ \\end{array}\\right. \\] where: \\(AcceptableRisk=\\) rate of acceleration tolerated by subject vehicle in making lane change into gap between two vehicles, ft/s/s, \\(MinAcceptableRisk=\\) deceleration rate assumed for most conservative driver (type 1), default is \\(-8\\) ft/s/s, \\(MaxAcceptableRisk=\\) deceleration rate assumed for most aggressive driver (type 10), default is \\(-15\\) ft/s/s, \\(UrgencyThreshold = 0.2\\) (default), \\(UrgencyFactor=\\frac{DriverAggressivenessFactor\\times MinNumOfLaneChangesToReachDestinationLane\\times LinkFreeFlowSpeed^2}{(20 \\times DistanceAvailableToCompleteLaneChange)}\\), \\(DriverAggressivenessFactor=\\frac{1+(DriverType - 5.5)}{DriverTypeFactor}\\) (Ranges from 0.82 (driver type 1) to 1.18 (driver type 10)), \\(DriverTypeFactor=25\\) (default), \\(MinNumOfLaneChangesToReachDestinationLane=\\) Number of lane changes to reach desired lane, \\(LinkFreeFlowSpeed=\\) Free-flow speed specified for the link, in ft/s, and \\(DistanceAvailableToCompleteLaneChange=\\) Distance to last point where vehicle must exit lane (e.g., end of lane drop), in ft. If needed deceleration (as calculated from car-following model) is less than acceptable risk, then allow vehicle to change lanes. The acceptable risk is also checked for the vehicle that would become the follower vehicle of the lane changing vehicle. 27.2 Discretionary Lane Changing Discretionary lane changing refers to vehicles that change lanes in order to obtain a more favorable position (i.e., to attain a higher speed in order to reach the desired speed). For example, when a vehicle changes lanes to pass a slower-moving vehicle. Check if subject vehicle is a candidate to consider a discretionary lane change Does vehicle have a leader? Is it traveling faster than 10 mi/h? Vehicles moving slowly (e.g., in a queue) do not consider discretionary lane changes. Get subject vehicle target speed (minimum of desired speed and maximum speed). Maximum speed might control for large truck on a steep grade. Calculate motivation to change lanes \\[ Motivation=\\left\\{\\begin{array}{l} 0&amp;\\mbox{if subject vehicle actual speed ≥ target speed}\\\\ 1&amp;\\mbox{if subject vehicle actual speed ≤ intolerable speed}\\\\ 1-\\frac{CurrentSpeed-IntolerableSpeed}{TargetSpeed-IntolerableSpeed}&amp;\\mbox{otherwise}\\\\ \\end{array}\\right. \\] \\(IntolerableSpeed=TargetSpeed\\times IntolerableSpeedMultiplier\\times DriverAggressivenessFactor\\) where: \\(IntolerableSpeedMultiplier=0.8\\) (default), \\(DriverAggressivenessFactor=\\frac{1+(DriverType-5.5)}{DriverTypeFactor}\\), and \\(DriverTypeFactor=25\\) (default). If motivation &gt; 0 and &lt; 1, compare motivation to random number Generate uniform random number (0-1) If motivation &gt; random number, motivation = 1 Otherwise, motivation = 0 If motivation = 1, determine desired lane to move into Check if lane to the right and/or left exists, and whether it supports subject vehicle’s desired downstream movement (left, through, right). For candidate lanes, calculate impedance score: \\[LookAheadDist=\\left[0.2+1.8\\times\\frac{NumDriverTypes-SubjectVehDriverType}{NumDriverTypes-1}\\right]\\times BaseLookAheadDist\\] \\(BaseLookAheadDist=750\\) ft (default) For 10 driver types, LookAheadDist will range, linearly, from 1500 ft for driver type 1 to 150 ft for driver type 10. More aggressive drivers tend to be more aggressive with lane changes and do not look as far downstream in evaluating whether they will really gain an advantage by changing lanes. For each candidate lane, calculate an impedance score. \\[LaneImpedenceScore=NumVehsDownstream+\\frac{TargetSpeed-LeadVehSpeedOnCandidateLane+2}{5}\\] where: \\(LaneImpedenceScore=\\) score corresponding to desirability of candidate lanes, lower/higher score is more/less desirable, \\(NumVehsDownstream=\\) the number of vehicles downstream of the subject vehicle, in the candidate lane, within the look ahead distance, \\(TargetSpeed=\\) minimum of desired speed and maximum speed of the subject vehicle, ft/s, and \\(LeadVehSpeedOnCandidateLane=\\) speed of vehicle that would be become leader of subject vehicle on candidate lane, ft/s. Subject to minimum value of 0. Compare impedance of each candidate lane (plus buffer value, default = 3) to impedance of current lane (buffer value not applied). Desired lane is one with lowest impedance value. If a different lane is desired, check for acceptable gap for merging between potential leader and follower vehicles on adjacent lane. The process is the same as for a mandatory lane change. One difference is that the minimum acceptable risk for driver type 1 is reduced from \\(-8\\) ft/s\\(^2\\) to \\(-5\\) ft/s\\(^2\\); which results in lower acceleration rates tolerated for a discretionary lane change. The discretionary lane-changing logic also includes an option (setting in the vehicle entry settings dialog) to bias (but not restrict) slower moving vehicles to the right-side lanes. For example, if this option is selected, for a 3-lane roadway, the slowest vehicles in the traffic stream will generally be in the far-right lane, the fastest vehicles will be in the far-left lane, and “average” speed vehicles will be in the middle lane. However, unlike a lane restriction scenario, any of these vehicles can still use other lanes, which might happen temporarily for conducting passing maneuvers. This logic particularly comes into play for the truck vehicle types on grades. The trucks generally have somewhat lower desired speeds than the passenger cars, so they are more likely to be in the right- or middle-lane (of a 3-lane roadway) than in the left lane, but regardless of which lane they are initially in, as they begin to lose speed on a grade, they will look to move to the right-side lanes. For a smaller truck type (e.g., the single-unit truck) on a moderate grade, it still may be able to attain its desired speed and therefore will not be biased toward the right-side lanes. 27.3 Anticipatory Lane Changing Forthcoming 27.4 Vehicle Lane Change Modes There are multiple lane change modes that a vehicle may be in, as follows: Cooperation Oncoming Vehicle Minimum Cooperation Oncoming Vehicle Medium Cooperation Oncoming Vehicle Maximum Merge Accel Min Merge Accel Med Merge Accel Max Merge Decel Min Merge Decel Med Merge Decel Max Merge Cooperation Accel Min Merge Cooperation Accel Max Merge Cooperation Decel Min Merge Cooperation Decel Max Merge Cooperation Passing Oncoming Decel Min Merge Cooperation Passing Oncoming Decel Max Return To Safe Car Following Definitions forthcoming. "],["ChapterTwoLaneHwyModeling.html", "28 Two-Lane Highway Modeling 28.1 Passing Modes 28.2 Passing in Oncoming Lane 28.3 Passing in a Passing Lane Section", " 28 Two-Lane Highway Modeling Detail about the logic used for two-lane highway passing maneuvers is provided here. Additional information is provided in Li and Washburn (2011). 28.1 Passing Modes There are multiple passing modes that a vehicle may be in, as follows: Not Passing Passing Oncoming Initial Passing Oncoming Normal Passing Oncoming Abort Min Passing Oncoming Abort Med Passing Oncoming Abort Max Passing Oncoming Expedite Min Passing Oncoming Expedite Med Passing Oncoming Expedite Max Passing Lane Initial Passing Lane Normal Passing Lane Abort Passing Lane Expedite Passing Oncoming Cooperation Min Passing Oncoming Cooperation Med Passing Oncoming Cooperation Max Definitions forthcoming. 28.2 Passing in Oncoming Lane The most distinguishing feature of traffic operations on two-lane highways is passing in the oncoming lane (when passing lanes are not present). Therefore, this passing maneuver is constrained by not only the amount of opposing-lane distance used in the execution of a passing maneuver, but also the sight distance and clear-distance (or gap size) a follower requires before attempting a passing maneuver. The former issue depends on road design and markings of a no-passing zone, while the latter issue depends on traffic demands. The following subsections describe the various components of logic employed to determine when and how a vehicle will perform a passing maneuver in the oncoming lane. When will a vehicle attempt to pass a vehicle in front of it? 1. Determine if the subject vehicle is in a following mode Currently, the program defines a vehicle as being in a following mode when the time headway between it and the vehicle immediately in front of it is equal to or less than or equal to 2.5 s—this is currently the logic the HCM (Transportation Research Board and National Academies of Sciences, Engineering, and Medicine (2022)) uses to approximate % Followers. The value of 2.5 s, however, can be changed by the analyst in the settings. Additionally, the trailing vehicle must be traveling at a speed at least equal to the speed of the leading vehicle. If the subject vehicle is determined to be in a following mode, then the following steps are carried out to determine if the following vehicle will attempt a passing maneuver. 2. Determine tolerable speed If it is determined that a vehicle is in a following mode, then the tolerable speed for that vehicle is calculated. Tolerable speed is defined as the maximum speed at which the desire to pass for a following driver will be 100 percent. Tolerable speed varies for different driver types (See following equation), due to the different degree of aggressiveness for each driver type. Note that a driver’s desired speed is a function of free-flow speed and driver type. For example, a driver of type 1 will have a desired speed of 88% of the link free-flow speed, while a driver of type 10 will have a desired speed of 112% of the link free-flow speed (these percentages of free-flow speed can be modified by users in the Driver Settings). \\[TolerableSpee{d_i}=DesiredSpee{d_i}\\times\\frac{80+i}{100}\\] where: \\({TolerableSpeed_i} = \\text{tolerable speed for driver type } i \\text{ (mi/h)}\\), \\({DesiredSpeed_i} = \\text{desired speed for driver type } i \\text{ (mi/h), and}\\) \\(i = \\text{driver type, a value between 1 and 10 for default settings.}\\) 3. Determine the desire to pass The main factor influencing a driver’s desire to pass is the difference between their actual travel speed and their desired speed. The degree of the following driver’s desire to pass is quantified as a number between 0 and 1, based on a non-linear function of the current speed of the subject vehicle. The initial desire to pass (DTP) value is given by \\[ DTP=\\left\\{\\begin{array}{l} 1 &amp;\\mbox{if CurrentSpeed &lt; TolerableSpeed}\\\\ 0 &amp;\\mbox{if CurrentSpeed $\\geq$ DesiredSpeed}\\\\ [0.95\\times (DesiredSpeed-CurrentSpeed) \\times\\frac{1}{0.95 \\times DesiredSpeed-TolerableSpeed}]^4 &amp;\\mbox{elsewhere} \\end{array}\\right. \\] The DTP is illustrated graphically in the figure below for one example driver. Figure 28.1: Desire To Pass for Example Driver The DTP value is adjusted by an impatience factor. For vehicles that have a positive DTP, but are in a following mode and have not yet initiated a passing maneuver, the impatience factor will incrementally increase the DTP value with each simulation time step; thus increasing the probability of a passing maneuver being initiated. The impatience factor is also a function of the driver type, with larger increments being associated with more aggressive drivers. The impatience factor is given by \\[ImpatienceFactor=TSWTP\\times ImpatienceValue \\times \\sqrt{DT}\\] where: \\({TSWTP} = \\text{time spent wanting to pass (s)}\\), \\({ImpatienceValue} = \\text{degree of impatience in waiting to pass (default = 0.001), and}\\) \\({DT} = \\text{driver type, a value between 1 and 10 for default settings.}\\) The TSWTP counter will initiate when a vehicle has a DTP value greater than zero and will reset when the vehicle completes a pass or its DTP value goes to zero. Finally, the DTP is also adjusted based on the length of the trailing vehicle and the length of the leading vehicle. A longer leading vehicle, such as a large truck, will increase the DTP value for the trailing vehicle. Conversely, the DTP value will be decreased for a longer trailing vehicle. The adjustment to the DTP value for the leading and trailing vehicle lengths is given by \\[AdjDTP=(DTP+ImpatienceFactor)\\times [1-(\\frac{1}{14}-\\frac{1}{SubjectVehLength})]\\times \\ln[\\exp(1)-(\\frac{1}{14}-\\frac{1}{LeadVehLength})]\\times\\sqrt{\\frac{LeadVehLength}{SubjectVehLength}}\\] where: \\({14} = \\text{constant corresponding to shortest vehicle length (ft) used in SwashSim}.\\) The adjusted DTP value is then compared to a generated uniform random number between 0 and 1. If the adjusted DTP value is less than the random number, the subject vehicle will continue to follow the leading vehicle. If the adjusted DTP value is greater than or equal to the random number, the subject vehicle will initiate a passing maneuver, subject to other constraints as described in the following section. Constraints governing whether a pass will be initiated If it has been determined that a vehicle wants to initiate a passing maneuver, the following issues are considered. 1. Is the vehicle in a passing-allowed section? The program logic currently dictates that all passing maneuvers must be initiated in a passing-allowed section of the roadway (i.e., skip striping in the applicable direction).2 However, it is possible for a passing maneuver to be completed in a no-passing-allowed section, consistent with the field observations from Douglas W. Harwood et al. (2008). This is described in more detail under step 7. 2. Check whether a vehicle upstream of the subject vehicle is performing a passing maneuver If the subject vehicle is currently in the process of being passed by another vehicle, the subject vehicle will not initiate its passing maneuver. 3. Check whether the maximum number of allowed passing maneuvers is currently in progress The number of vehicles that can be simultaneously executing a passing maneuver in the oncoming lane is limited to three per each platoon of vehicles. Thus, the maximum number of vehicles that can be executing a passing maneuver along the defined length of highway is three times the number of platoons within that defined length of highway. A platoon is defined by a leading vehicle that is not in a following mode and trailing vehicles that are all considered to be in a following mode. 4. Check the number of vehicles that must be passed to complete the passing maneuver A vehicle is prevented from starting a passing maneuver when, due to insufficient gaps for merging between the vehicles ahead, there are more than 5 vehicles that would need to be passed. 5. Determine the required passing sight distance If the subject vehicle is allowed to initiate a passing maneuver per the above constraints, then the passing sight distance (PSD) will be calculated. PSD is the minimum distance necessary between the potential passing vehicle and an oncoming vehicle that will still allow the potential passing vehicle to safely initiate and complete a passing maneuver of a leading slower vehicle in the oncoming lane. If the horizontal and/or vertical alignment aspects of a highway do not provide unobstructed sight distance at least equal in length to the PSD, then the highway is typically striped with solid yellow center lines (i.e., no-passing allowed).3 Both A policy on Geometric Design of Highways and Streets (AASHTO (2004)) and the Manual on Uniform Traffic Control Devices for Streets and Highways (MUTCD) (FHWA (2003)) provide minimum PSD values for design and marking. However, their respective recommended PSD values vary significantly, with the AASHTO-recommended values being considerably larger than the MUTCD-recommended values. Douglas W. Harwood et al. (2008) proposed recommendations on the adequacy of current procedures and guidelines used to estimate minimum PSD requirements for highway design and pavement marking. The research involved a review of current practice, an extensive analysis of various alternative PSD models, and field studies of passing maneuvers on two-lane highways. Field studies conducted in Missouri and Pennsylvania, together with field data from Texas as part of another study (Carlson, Miles, and Johnson (2006)), were used to characterize driver behavior and quantify traffic performance measures for passing maneuvers. Based on the literature review and the field study, Douglas W. Harwood et al. (2008) indicated that the Glennon (1988) model and the Hassan, Easa, and El Halim (1996) are the most reasonable models. The Glennon (1988) and Hassan, Easa, and El Halim (1996) models result in considerably shorter PSD values than the AASHTO-recommended values, much closer to the MUTCD-recommended values. The main reason for this is because the Glennon (1988) and Hassan, Easa, and El Halim (1996) models consider that a passing vehicle can easily abort the passing maneuver before it reaches the critical position4; thus, contending that the necessary PSD really only needs to be considered from the critical position and not for the entire length of the passing maneuver. Furthermore, the Douglas W. Harwood et al. (2008) study argued that crash statistics for two-lane highways do not provide much support for the notion that the current practice for marking passing zones (based on the MUTCD criteria) is in need of revising. Based on the field data results of the Douglas W. Harwood et al. (2008) study, the authors recommend the following assumptions be used when applying the Glennon (1988) and Hassan, Easa, and El Halim (1996) models: 1. The speeds of the passing and opposing vehicles are equal and represent the design speed of the highway. 2. The passed vehicle travels at uniform speed and the speed difference between the passing and passed vehicles is 12 mi/h. 3. The passing vehicle has sufficient acceleration capability to reach the specified speed difference relative to the passed vehicle by the time it reaches the critical position. (same as the assumption that each vehicle will travel at the constant speed after the critical position) 4. The lengths of the passing and passed vehicles are 19 ft. 5. The passing driver’s perception-reaction time in deciding to abort a passing vehicle is 1 s. 6. The deceleration rate used in aborting a pass is 11.1 ft/s2. 7. For a completed or aborted pass, the headway between the passing and passed vehicles is 1 s. 8. The minimum clearance headway between the passing and opposing vehicles at the point at which the passing vehicle returns to its normal lane is 1 s. Using these assumptions in the Glennon (1988) and Hassan, Easa, and El Halim (1996) models results in PSD values similar to the MUTCD-recommended PSD values, as illustrated in the following figure. Figure 28.2: Comparison of PSD Values Therefore, Douglas W. Harwood et al. (2008) recommended that AASHTO adopt the MUTCD PSD values for inclusion in the next edition of A policy on Geometric Design of Highways and Streets. These MUTCD values are justified since they are consistent with the values produced by the Glennon (1988) and Hassan, Easa, and El Halim (1996) models when used with input values based on current field observations. The default PSD model used in SwashSim is the AASHTO model. However, it is also possible to use the MUTCD PSD values instead. The AASHTO PSD model is presented first, followed by the modifications necessary to implement the MUTCD PSD values. Component of passing maneuver Speed range (mi/h) 30-40 40-50 50-60 60-70 Average passing speed (mi/h) 34.9 43.8 52.6 62.0 Initial maneuver a (ft/s/s) 1.40 1.43 1.47 1.50 t1 (s) 3.6 4.0 4.3 4.5 d1 (ft) \\(1.467{t_1}\\left({v - m + \\frac{{a{t_1}}}{2}} \\right)\\) Occupation of left lane t2 (s) 9.9a d2 (ft) \\(1.467v{t_2}\\) Clearance distance d3 (ft) 100 180 250 300 Opposing vehicle d4 0.667 × d2 Minimum PSD d 1 + d2 + d3 + d4 a The original AASHTO criteria included four separate values for \\(t_2\\), based on the passing vehicle speed. The Douglas W. Harwood et al. (2008) study did not “…provide any evidence to support the hypothesis that the left lane travel time increases with increasing passed vehicle speed. Therefore, it is recommended that a constant value of \\(t_2\\), independent of speed, should be used…”. The chosen value was the mean value of 9.9 seconds from their study. where: \\(d_1 = \\text{initial maneuver—distance traveled from start of passing maneuver until passing vehicle encroaches upon oncoming lane (ft)}\\), \\(t_1 = \\text{time required for initial maneuver (s)}\\), \\(a = \\text{acceleration of passing vehicle when initiating passing maneuver (mi/h/s)}\\), \\(v = \\text{average speed of passing vehicle (mi/h)}\\), \\(m = \\text{difference in speed of passed vehicle and passing vehicle (mi/h)}\\), \\(d_2 = \\text{the distance traveled by the passing vehicle from the point of encroachment in the oncoming lane to the point of return to the normal lane (ft)}\\), \\(t_2 = \\text{time spent traveling in the oncoming lane (s)}\\), \\(d_3 = \\text{the shortest desirable distance between the front bumpers of the passing and opposing vehicle when the passing vehicle returns to the normal lane (ft), and}\\) \\(d_4 = \\text{the distance traveled by the opposing vehicle during the time the passing vehicle travels from the position of being directly abreast of the vehicle being passed to the return to the normal lane (ft)}\\). The PSD distance components are illustrated in the following figure. Figure 28.3: Elements of Passing Sight Distance for Two-lane Highways (AASHTO (2004)) For computational convenience, the same formulas used in the AASHTO PSD model are used for generating the MUTCD PSD values. To implement the MUTCD PSD values in SwashSim, the values shown in the table above should be revised as shown in the following Table. These values can be changed in the settings. Component of passing maneuver Speed range (mi/h)   30-40 40-50 50-60 60-70   Average passing speed (mi/h)   34.9 43.8 52.6 62.0 Initial maneuver 1 (s) 3.0 2.5 2.0 1.6 Occupation of left lane 2 (s) 5.9 6.0 6.2 6.4 Clearance distance 3 (ft) 80 100 120 140 The following table shows the PSD values computed with the revised variable values as well as the actual MUTCD-recommended PSD values. The approximated MUTCD PSD values compare very favorably with the actual PSD values.   Design speed (mi/h)   40 45 50 55 60 65 70 Modified AASHTO PSD (ft) 605 708 801 909 1000 1111 1202 MUTCD PSD (ft) 600 700 800 900 1000 1100 1200 6. Check length of passing zone and compare to the minimum passing zone length The length of the passing zone (as indicated by roadway markings) is compared to the minimum passing zone length (which is equal to d1 + d2 (See following flow chart)), as suggested by AASHTO). A vehicle will not initiate a passing maneuver unless the available passing zone length is equal to or greater than the minimum passing zone length. If the marked passing zone length is greater than the minimum passing zone length, then the following check is made. 7. Determine effective passing zone length and compare to the distance needed to complete the pass As mentioned earlier, it is possible for a vehicle to complete its passing maneuver in a section of roadway marked as no-passing allowed. The length of the available passing zone (from the current position of the passing vehicle) is initially determined from just the roadway markings. This value is then adjusted based on the permissible amount of distance beyond the marked passing zone allowed for the passing vehicle’s driver type. This results in an effective passing zone length, calculated as follows: \\[ IllegalPassDistPct=\\left\\{\\begin{array}{l} MinPct &amp;\\mbox{if Driver Type = 1}\\\\ MaxPct &amp;\\mbox{if Driver Type = 10}\\\\ Linear Interpolation &amp;\\mbox{otherwise} \\end{array}\\right. \\] where: \\({IllegalPassDistPct} = \\text{allowable percentage of the total passing distance beyond the passing zone (as indicated by roadway markings),}\\) \\({MinPct} = \\text{allowable percentage of the total passing distance corresponding to vehicle of driver type 1 (default = 0), and}\\) \\({MaxPct} = \\text{allowable percentage of the total passing distance corresponding to vehicle of driver type 10 (default = 25).}\\) \\[DistAvailForPass=AvailPassZoneDist+AvailPassZoneDist \\times\\frac{IllegalPassDistPct}{100}\\] where: \\({DistAvailForPass} = \\text{the total amount of distance available for passing, based on roadway markings and allowable distance downstream of marked passing zone, and}\\) \\({AvailPassZoneDist} = \\text{length of marked passing zone available at beginning of passing maneuver.}\\) The distance needed to complete the pass (\\(DNTCP\\)), which before the passing maneuver is initiated is equal to the PSD, is compared to the distance available for the pass (i.e., effective passing zone length). If the \\(DNTCP\\) is less than the PSD, then the passing maneuver can be initiated. How a potential passer executes its passing maneuver? If all the requirements discussed in the previous section are satisfied for a potential passing vehicle, it will initiate the passing maneuver. The general logic of executing a passing maneuver is divided into three stages, as illustrated in the following flowchart. Figure 28.4: General Passing Manuever Process Stage 1: Initiate passing in the normal lane At the beginning of a passing maneuver, the potential passer starts to accelerate at the acceleration rate based on its own speed according to the first Table. At the same time, the potential passer moves over to the opposing lane. Stage2: Passing in the opposing lane After the potential passer moves into the opposing lane, it will keep on accelerating until it reaches a speed 12 mi/h (this value can be changed in the settings) greater than the speed of the vehicle being passed.5 Meanwhile, the variable \\(DNTCP\\) (distance needed to complete pass) is compared to the variable \\(DTC\\)6 (distance to collision with the oncoming vehicle) every time step (see the following figure for an illustration of these variables). Figure 28.5: Illustration of DNTCP and DTC As mentioned previously, before the passing maneuver is initiated, the \\(DNTCP\\) is equal to the PSD. However, once the passing maneuver is in progress, the \\(DNTCP\\) is continually changing (generally decreasing). For calculating \\(DNTCP\\), the time needed to complete passing (\\(TNTCP\\)) is first calculated. Since the potential passer will stop accelerating when its speed is 12 mi/h (i.e., 17.6 ft/s) greater than the vehicle being passed, the value of \\(TNTCP\\) is calculated by \\[ TNTCP=\\left\\{\\begin{array}{l}\\frac{-[{v_1}(t)-{v_2}(t)]}{({a_1}-{a_2})}+\\frac{\\sqrt{[{v_1}(t)-{v_2}(t)]^2-2({a_1}-{a_2})(VehPo{s_1}-VehPo{s_2}-ClearGap)}}{({a_1}-{a_2})},t&lt;\\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}}+{t_0}\\\\ \\frac{[{v_1}(t)-{v_2}(t)]}{{a_2}}-\\frac{\\sqrt{[{v_1}(t)-{v_2}(t)]^2+2{a_2}(VehPo{s_1}-VehPo{s_2}-ClearGap)}}{{a_2}},t \\ge \\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}}+{t_0} \\end{array}\\right. \\] where: \\({TNTCP} = \\text{time needed to complete pass (s),}\\) \\({t_0} = \\text{time step when the passing maneuver initiates (s),}\\) \\({t} = \\text{current time step (s),}\\) \\({v_1}(t) = \\text{speed of the passing vehicle at time step } t \\text{ (ft/s),}\\) \\({v_2}(t) = \\text{speed of the vehicle being passed at time step } t \\text{ (ft/s),}\\) \\({v_1}(0) = \\text{initial speed of the passing vehicle (ft/s),}\\) \\({v_2}(0) = \\text{initial speed of the vehicle being passed (ft/s),}\\) \\({a_1} = \\text{acceleration of the passing vehicle (ft/s}^2),\\) \\({a_2} = \\text{acceleration of the vehicle being passed (ft/s}^2),\\) \\(VehPo{s_1} = \\text{position of the passing vehicle relative to the upstream end of the segment at time step } t \\text{ (ft), and}\\) \\(VehPo{s_2} = \\text{position of the vehicle being passed relative to the upstream end of the segment at time step } t \\text{ (ft).}\\) Note that \\(a_1\\) is assumed to be a constant, while \\(a_2\\) is assumed to be 0, during the passing maneuver; thus, the calculation of \\(TNTCP\\) can be simplified as \\[ TNTCP=\\left\\{\\begin{array}{l} \\frac{-[{v_1}(t)-{v_2}(t)]}{{a_1}}+\\frac{\\sqrt{[{v_1}(t)-{v_2}(t)]^2-2{a_1}(VehPo{s_1}-VehPo{s_2}-ClearGap)}}{{a_1}},t-{t_0}&lt;\\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}}\\\\ \\frac{ClearGap-(VehPo{s_1}-VehPo{s_2})}{17.6},t-{t_0}\\ge\\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}} \\end{array}\\right. \\] Once the \\(TNTCP\\) is obtained, the \\(DNTCP\\) can be calculated by \\[ DNTCP=\\left\\{\\begin{array}{l} {v_1}(t)TNTCP+0.5{a_1}{(TNTCP)^2},t-{t_0}&lt;\\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}}\\\\ {v_1}(t)TNTCP,t-{t_0}\\ge\\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}} \\end{array}\\right. \\] For the computation of \\(DTC\\), the time to collision with the oncoming vehicle (\\(TTC\\)) is first calculated, given by \\[ TTC=\\left\\{\\begin{array}{l} \\frac{-[{v_1}(t)+{v_3}(t)]}{({a_1}+{a_3})}+\\frac{{\\sqrt{{[{v_1}(t)+{v_3}(t)]}^2}+2({a_1}+{a_3})(VehPo{s_1}-VehPo{s_3})}}{({a_1}+{a_3})},t&lt;\\frac{{{v_2}(0)+17.6-{v_1}(0)}}{{a_1}}+{t_0}\\\\ \\frac{-[{v_1}(t)+{v_3}(t)]}{{a_3}}+\\frac{\\sqrt{[{v_1}(t)+{v_3}(t)]}^2+2{a_3}(VehPo{s_1}-VehPo{s_3})}{{a_3}},t\\ge\\frac{{v_2}(0)+17.6-{v_1}(0)}{{a_1}}+{t_0} \\end{array}\\right. \\] where: \\({TTC} = \\text{time to collision with the oncoming vehicle (s),}\\) \\({v_3}(t) = \\text{speed of the oncoming vehicle at time step } t \\text{ (ft/s),}\\) \\({a_3} = \\text{acceleration of the oncoming vehicle (ft/s}^2 \\text{), and}\\) \\(VehPo{s_3} = \\text{position of the oncoming vehicle relative to the upstream end of the segment at time step } t \\text{ (ft)}\\). Therefore, the \\(DTC\\) can be calculated by \\[ DTC=\\left\\{\\begin{array}{l} {v_1}(t)TTC+0.5{a_1}{(TTC)^2},t-{t_0}&lt;\\frac{{{v_2}(0)+17.6-{v_1}(0)}}{{{a_1}}}\\\\ {v_1}(t)TTC,t-{t_0}\\ge\\frac{{{v_2}(0)+17.6-{v_1}(0)}}{{{a_1}}} \\end{array}\\right. \\] At every time step of the simulation, the value of \\(DNTCP\\) is compared to the value of \\(DTC\\). The result of this comparison leads to the following different situations that must be considered. (1) DNTCP &lt; DTC If the \\(DNTCP\\) is less than the \\(DTC\\), the passer will continue its passing maneuver as planned. Another issue related to the completion of passing is the gap size in front of the vehicle being passed, which is included in the calculation of \\(DNTCP\\). The passer requires a certain gap size to be able to return to the normal lane in order to complete passing. The default value for this gap size (i.e., ClearGap in above figure, Illustration of DNTCP and DTC) is 75 ft, but can be revised in the parameter settings. The passing vehicle only accepts the gap in front of the vehicle being passed if it is greater than or equal to the minimum gap. (2) DNTCP ≥ DTC If the \\(DNTCP\\) is greater than or equal to the \\(DTC\\), the decision on whether the passing vehicle will continue or abort its passing maneuver is dependent on the relative position of the passing vehicle to the passed vehicle. If the passing vehicle has reached the critical position, the passing vehicle will continue its passing maneuver. If the passing vehicle has not reached the critical position, it will abort the passing maneuver. A study by Douglas W. Harwood and Glennon (1976) defined the critical position as the point at which the sight distances required to abort the pass and to complete the pass are equal. Two studies, one by Van Valkenburg and Michael (1971) and one by Weaver and Glennon (1972) independently recognized a key position of a passing maneuver occurs at the point where the passing driver can no longer safely abort the pass and is, therefore, committed to complete it. However, no unanimously accepted definition of the critical position currently exists. Douglas W. Harwood et al. (2008) suggests that the critical position can be considered to be the point when the passing vehicle and vehicle being passed are directly abreast of one another. This is the definition applied in the SwashSim logic. The passer has not reached the critical position If the passing vehicle has not yet reached the critical position when \\(DNTCP\\) is greater than \\(DTC\\), it will abort the passing maneuver. The process of returning to the normal lane is similar to that of completing a passing maneuver. The gap behind the vehicle being passed will be checked for the return. The minimum gap here is also set as three times the length of the passing vehicle, and the passing vehicle will only accept a gap greater than or equal to the minimum gap. The passer has reached the critical position If the passer has reached the critical position when \\(DNTCP\\) is greater than \\(DTC\\), the passer will continue with completing the passing maneuver. In order to accommodate this without collision, the passing vehicle will speed up and/or the oncoming vehicle will decelerate. The specific amount of acceleration by the passing vehicle and/or deceleration by the oncoming vehicle is a function of the current acceleration rate of each vehicle, the passing vehicle’s acceleration capabilities, the oncoming vehicle’s deceleration capabilities, and the current \\(DTC\\) value. Stage 3: Return to the normal lane For a passing maneuver being completed, the passer will return to the normal lane in front of the vehicle being passed when the gap is sufficient. For an aborted passing maneuver, the passer will return to the normal lane behind the vehicle being passed if there is a sufficient gap. The existing mandatory lane changing logic in SwashSim is utilized for this situation. Under certain conditions, the passing vehicle will consider passing more than one vehicle. Specifically, if the passing vehicle’s speed is greater than the speed of the vehicle in front of the current vehicle being passed, and the gap in front of the current vehicle being passed is insufficient, the passing vehicle will attempt to pass the vehicle in front of the current vehicle being passed, subject to the logic and constraints as previously discussed. 28.3 Passing in a Passing Lane Section A passing lane is defined as a lane added to improve passing opportunities in one direction of travel on a conventional two-lane highway. Although it may vary by jurisdiction, the logic implemented in this simulation program assumes that slower vehicles will move to the right lane in a passing lane section and the passing vehicles will pass on the left (usually this is indicated by a sign such as ‘Keep Right Unless Passing’). Ideally, each driver will drive following the guidance. However, it is recognized that this does not always happen; thus, the developed logic allows for the possibility of an impeding vehicle not moving over. For each vehicle in a passing-lane section (hereafter referred to as the subject vehicle), the logic first checks the headway between this subject vehicle and the vehicle immediately behind, and then checks the headway between this subject vehicle and the vehicle immediately ahead. If the subject vehicle has a vehicle behind it in following mode (i.e., headway \\(\\leq\\) follower headway threshold) and is not in following mode itself, the willingness to move over (WTMO) to the non-passing lane of the passing lane section for the subject vehicle will be considered. The value of WTMO is determined as follows: \\[ WTMO=\\left\\{\\begin{array}{l} 0 &amp;\\mbox{if SVS &gt; (FFS+5)}\\\\ \\frac{FFS+5-SVS}{15} &amp;\\mbox{if (FFS - 10) &lt; SVS &lt; (FFS + 5)}\\\\ 1 &amp;\\mbox{if SVS &lt; (FFS-10)}\\end{array}\\right. \\] where: \\({WTMO} = \\text{willingness to move over (unitless),}\\) \\({SVS} = \\text{subject vehicle speed (mi/h), and}\\) \\({FFS} = \\text{free-flow speed (mi/h)}\\) This parameter will be adjusted by dividing by the square root of driver type if the length of the subject vehicle is less than 40 ft (the length of a single-unit truck), otherwise it remains as the original value (not dividing by the square root of driver type results in a higher probability to move over for trucks). The adjusted willingness to move over is compared to a generated uniform random number between 0 and 1, and if it is greater than the random number the subject vehicle will move over to the non-passing lane; otherwise, it will stay in the passing lane. The existing SwashSim logic is utilized for determining when a vehicle will move from the lane being dropped at the end of the passing lane section back to the continuous lane. Generally, the discretionary lane change logic will apply for vehicles in this lane (either slow vehicles that moved out of the way, or faster vehicles that are trying pass slower vehicles that did not move over, or vice versa if the passing lane is the one that drops) until such a vehicle gets near to the end of the lane being dropped, in which case the mandatory lane change logic will be applied. For computational efficiency reasons, this check is actually performed before the desire to pass calculations.↩︎ SwashSim does not compute available passing sight distance based on the specified roadway geometry; thus, it is necessary for the user to explicitly identify the allowable passing zones along the length of the highway.↩︎ Although definitions for the critical position vary, it can generally be considered to be the case when the passing vehicle and the vehicle being passed are abreast of one another.↩︎ Based on NCHRP Report 605 harwood_passing_2008↩︎ The \\(DTC\\) will be infinite when no oncoming vehicle is present↩︎ "],["ChapterEmissions.html", "29 Emissions and Fuel Consumption 29.1 Vehicle-Specific Power (VSP) Emission 29.2 OBD-based emissions/fuel use calculations", " 29 Emissions and Fuel Consumption 29.1 Vehicle-Specific Power (VSP) Emission Frey, Zhang, and Rouphail (2008) used vehicle specific power as an indicator of engine power demand. For a typical light duty vehicle, VSP is: \\[VSP=0.278v \\times [0.305a+9.81 \\times \\sin(a+\\tan (\\frac{r}{100})+0.132]+0.0000065v^3\\] where: \\(VSP=\\) vehicle specific power (kw/ton), \\(v=\\) speed (km/h), \\(a=\\) acceleration (km/h/s), and \\(r=\\) road grade (%). VSP Mode Definition NO (mg/s) HC (mg/s) CO (mg/s) CO\\({_2}\\) (g/s) Fuel (g/s) 1 \\(VSP&lt;-2\\) 0.12 0.076 1.83 1.30 0.41 2 \\(-2 \\le VSP&lt;0\\) 0.092 0.083 1.86 1.43 0.45 3 \\(0 \\le VSP&lt;1\\) 0.026 0.056 0.90 0.97 0.31 4 \\(1 \\le VSP&lt;4\\) 0.14 0.12 2.59 2.03 0.64 5 \\(4 \\le VSP&lt;7\\) 0.21 0.16 3.68 2.74 0.87 6 \\(7 \\leq VSP&lt;10\\) 0.23 0.20 4.74 3.42 1.08 7 \\(10 \\le VSP&lt;13\\) 0.29 0.24 5.73 4.02 1.27 8 \\(13 \\le VSP&lt;16\\) 0.32 0.28 6.18 4.56 1.44 9 \\(16 \\le VSP&lt;19\\) 0.37 0.31 7.09 5.08 1.61 10 \\(19 \\le VSP&lt;23\\) 0.47 0.35 7.81 5.61 1.77 11 \\(23 \\le VSP&lt;28\\) 0.59 0.38 8.36 6.05 1.91 12 \\(28 \\le VSP&lt;33\\) 0.68 0.42 9.01 6.41 2.03 13 \\(33 \\le VSP&lt;39\\) 0.79 0.46 10.5 6.86 2.17 14 \\(39 \\le VSP\\) 0.97 0.48 10.9 7.41 2.34 The average 95% confidence intervals for these VSP modes in % are \\(\\pm 5\\), \\(\\pm 2\\), \\(\\pm 3\\), \\(\\pm 1\\), and \\(\\pm 1\\) for NO, HC, CO, \\(\\text{CO}{_2}\\), and fuel, respectively. The unit for VSP is kw/ton. Figure 29.1: VSP Emissions Settings Additional information about how this methodology is incorporated into simulation is described in Washburn et al. (2015). 29.2 OBD-based emissions/fuel use calculations The following calculation methodology is described in Hu, Frey, and Washburn (2016) and Washburn et al. (2017). The RPM value used in the calculations of this section is obtained from the calculations described in Maximum Acceleration (rearranged to solve for engine speed). Calculate VSP, from VSP-based emissions/fuel use calculations Calculate \\[MAP\\times RPM=\\text{min}(a\\times VSP^b\\times c,d)\\] where: \\(a=\\) scaling parameter, \\(b=\\) power parameter, \\(c=\\) multiplicative bias correction factor (equals 1.0 for all cases), and \\(d=\\) additive bias correction factor. according to the values in the following Table. Vehicle Year 2005 2005 2008 2004 2001 2009 1998 2002 2010 1998 Make Chevrolet Mazda Chevrolet Pontiac Volvo Honda Buick Chevrolet Ford Chevrolet Model Tahoe 6 Impala Grand AM GT S40 Civic Century Silverado F150 S10 \\(MAP \\times RPM\\) \\(a\\) 38100 58700 44800 44300 59900 59100 55200 37900 36600 43200 NULL \\(b\\) 0.42 0.39 0.42 0.42 0.37 0.43 0.35 0.44 0.44 0.35 NULL \\(c\\) 32000 45000 40000 36300 45400 37800 43600 34400 32100 33100 Calculate manifold absolute pressure \\[MAP=\\frac{MAP\\times RPM}{RPM}\\] Calculate mass air flow \\[MassAirFlow=\\frac{MAP\\times EngineDisplacement\\times\\frac{RPM}{60\\times EngineStrokesPerCycle}\\times EngineVolumetricEfficiency}{1545.349\\times (EngineIntakeAirTemp+273.15)}\\] \\[EngineLoad = \\frac{{(MAP \\times RPM + 66189)}}{{3556.4}}\\] \\[{m_i} = a{(MAP \\times RPM)^b} \\times c + d\\] \\[{m_{NOx}} = \\frac{{a&#39;}}{{{{(MAP \\times RPM)}^{0.5}}}}\\text{exp}\\left( {\\frac{{-b&#39;}}{{MAP \\times RPM}}} \\right)\\] Figure 29.2: OBD Emissions Settings "],["references.html", "References", " References AASHTO. 2004. A Policy on Geometric Design of Highways and Streets. 5th ed. Washington, D.C.: American Association of State Highway; Transportation Officials. Beckmann, Martin, C. B. Mcguire, and Christopher B. Winsten. 1957. “Studies in the Economics of Transportation.” The Economic Journal 67 (265): 116–18. https://doi.org/10.2307/2227641. Bonneson, J, M Pratt, and J Miles. 2007. Development of Guidelines for Establishing Effective Curve Advisory Speeds. Vol. 0–5439–1. Texas A&amp;M Transportation Institute. https://tti.tamu.edu/tti-publication/development-of-guidelines-for-establishing-effective-curve-advisory-speeds/. Carlson, Paul J., Jeffrey D. Miles, and Patricia K. Johnson. 2006. “Daytime High-Speed Passing Maneuvers Observed on Rural Two-Lane, Two-Way Highway: Findings and Implications.” Transportation Research Record 1961 (1): 9–15. https://doi.org/10.1177/0361198106196100102. Cohen, Stephen L. 2002a. “Application of Car-Following Systems in Microscopic Time-Scan Simulation Models.” Transportation Research Record 1802 (1): 239–47. https://doi.org/10.3141/1802-27. ———. 2002b. “Application of Car-Following Systems to Queue Discharge Problem at Signalized Intersections.” Transportation Research Record 1802 (1): 205–13. https://doi.org/10.3141/1802-23. Courage, Kenneth G., Scott S. Washburn, and Jin-Tae Kim. 2002. “Development of an XML-Based Specification for Traffic Model Data Exchange.” Transportation Research Record 1804: 144–50. https://doi.org/10.3141/1804-19. Dafermos, Stella C., and Frederick T. Sparrow. 1969. “Traffic Assignment Problem for a General Network.” Journal of Research of the National Bureau of Standards, Section B: Mathematical Sciences 73B (2): 91–118. https://doi.org/10.6028/jres.073B.010. FHWA. 2003. Manual on Uniform Traffic Control Devices. 2003rd ed. Washington, D.C.: US Department of Transportation, Federal Highway Administation; FHWA. Frank, Marguerite, and Philip Wolfe. 1956. “An Algorithm for Quadratic Programming.” Naval Research Logistics Quarterly 3 (1-2): 95–110. https://doi.org/10.1002/nav.3800030109. Frey, H. Christopher, Kaishan Zhang, and Nagui M. Rouphail. 2008. “Fuel Use and Emissions Comparisons for Alternative Routes, Time of Day, Road Grade, and Vehicles Based on In-Use Measurements.” Environmental Science &amp; Technology 42 (7): 2483–89. https://doi.org/10.1021/es702493v. Glennon, John C. 1988. “New and Improved Model of Passing Sight Distance on Two-Lane Highways.” Transportation Research Record 1195: 132–37. Harwood, Douglas W., David K. Gilmore, K. R. Richard, J. M. Dunn, and Carlos Sun. 2008. Passing Sight Distance Criteria. Vol. NCHRP Report 605. National Cooperative Highway Research Program. Washington, D.C.: Transportation Research Board. https://doi.org/10.17226/23278. Harwood, Douglas W, and John C Glennon. 1976. “Framework for Design and Operation of Passing Zones on Two-Lane Highways.” Transportation Research Record 601: 45–50. Hassan, Yasser, Said M. Easa, and A. O. Abd El Halim. 1996. “Passing Sight Distance on Two-Lane Highways: Review and Revision.” Transportation Research Part A: Policy and Practice 30 (6): 453–67. https://doi.org/10.1016/0965-8564(95)00032-1. Hu, Jiangchuan, H. Christopher Frey, and Scott S. Washburn. 2016. “Comparison of Vehicle-Specific Fuel Use and Emissions Models Based on Externally and Internally Observable Activity Data.” Transportation Research Record 2570 (1): 30–38. https://doi.org/10.3141/2570-04. Li, Jing, and Scott S. Washburn. 2011. “Implementing Two-Lane Highway Simulation Modeling into CORSIM.” Procedia - Social and Behavioral Sciences, 6th International Symposium on Highway Capacity and Quality of Service, 16 (January): 293–305. https://doi.org/10.1016/j.sbspro.2011.04.451. Mannering, Fred L., and Scott S. Washburn. 2019. Principles of Highway Engineering and Traffic Analysis, 7th Edition. 7th Edition. Wiley. https://www.wiley.com/en-us/Principles+of+Highway+Engineering+and+Traffic+Analysis%2C+7th+Edition-p-9781119493969. Ozkul, Seckin. 2014. Advanced Vehicle Dynamics Modeling Approach in Traffic Microsimulation with Emphasis on Commercial Truck Performance and On-Board-Diagnostics Data. Vol. Dissertation. University of Florida. Papageorgiou, Markos, Habib Hadj-Salem, and Jean-Marc Blosseville. 1991. “ALINEA: A Local Feedback Control Law for On-Ramp Metering.” Transportation Research Record 1320: 58–64. Public Roads, Bureau of. 1964. Traffic Assignment Manual. Washington, DC: US Department of Commerce, Urban Planning Division. Transportation Research Board and National Academies of Sciences, Engineering, and Medicine. 2022. Highway Capacity Manual 7th Edition: A Guide for Multimodal Mobility Analysis. Washington, DC: The National Academies Press. https://doi.org/10.17226/26432. Van Valkenburg, G. W., and Harold L. Michael. 1971. “Criteria for No-Passing Zones.” Highway Research Record, no. 366. https://trid.trb.org/View/116952. Wardrop, J. G. 1952. “Some Theoretical Aspects of Road Traffic Research.” In, Part Ii, VoL 1, 2:325–62. Institution of Civil Engineers. https://doi.org/10.1680/ipeds.1952.11259. Washburn, Scott S., and Carlos O. Cruz-Casas. 2010. “Impact of Trucks on Signalized Intersection Capacity.” Computer-Aided Civil and Infrastructure Engineering 25 (6): 452–67. https://doi.org/10.1111/j.1467-8667.2010.00651.x. Washburn, Scott S., H. Christopher Frey, Nagui M. Rouphail, Jack Hulsberg, and Jiangchuan Hu. 2015. Emissions Modeling and Integration into Microsimulation Modeling. Southeastern Transportation Research, Innovation, Development; Education Center, University of Florida. Washburn, Scott S., H. Christopher Frey, Nagui Rouphail, and Innovation Southeastern Transportation Research Development and Education Center (STRIDE). 2017. “On-Board-Diagnostics (OBD) Data Integration into Traffic Microsimulation for Vehicle-Specific Fuel Use &amp; Emissions Modeling &amp; In-Vehicle App Testing.” 2013-034. https://rosap.ntl.bts.gov/view/dot/36694. Washburn, Scott S., and Seckin Ozkul. 2013. Heavy Vehicle Effects on Florida Freeways and Multilane Highways. Florida Department of Transportation, Tallahassee, FL. Washburn, Scott S., Donald Watson, Zilin Bian, Tapio Luttinen, Ahmed Al-Kaisy, Amirhossein Jafari, Richard Dowling, and Aaron Elias. 2018. Improved Analysis of Two-Lane Highway Capacity and Operational Performance. Washington, D.C.: Transportation Research Board. https://doi.org/10.17226/25179. Washburn, Scott S., Donald Watson, and Ziqi Song. 2014. Impact of Lane Closures on Roadway Capacity: Phase 2. Vol. Final Report. Florida Department of Transportation. Tallahassee, FL. Weaver, Graeme D., and John C. Glennon. 1972. “Design and Striping for Safe Passing Operations.” Highway Research Record, no. 390. https://trid.trb.org/View/117018. Yu, Xue Feng. 2009. “Genetic Fuzzy Logic Approach to Local Ramp Metering Control Using Microscopic Traffic Simulation : A Thesis Presented in Partial Fulfillment of the Requirements for the Degree of Master of Engineering in Mechatronics at Massey University, Auckland, New Zealand.” PhD thesis, Massey University. http://hdl.handle.net/10179/1146. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
